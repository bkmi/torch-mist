Search.setIndex({"docnames": ["autoapi/index", "autoapi/torch_mist/baselines/base/index", "autoapi/torch_mist/baselines/index", "autoapi/torch_mist/distributions/conditional/categorical/index", "autoapi/torch_mist/distributions/conditional/correlated_normal/index", "autoapi/torch_mist/distributions/conditional/index", "autoapi/torch_mist/distributions/index", "autoapi/torch_mist/distributions/parametrizations/index", "autoapi/torch_mist/distributions/parametrizations/map/index", "autoapi/torch_mist/distributions/product/index", "autoapi/torch_mist/distributions/transforms/base/index", "autoapi/torch_mist/distributions/transforms/index", "autoapi/torch_mist/distributions/transforms/linear/index", "autoapi/torch_mist/distributions/transforms/permute/index", "autoapi/torch_mist/distributions/transforms/split/index", "autoapi/torch_mist/distributions/utils/index", "autoapi/torch_mist/estimators/base/index", "autoapi/torch_mist/estimators/discriminative/index", "autoapi/torch_mist/estimators/generative/index", "autoapi/torch_mist/estimators/hybrid/index", "autoapi/torch_mist/estimators/index", "autoapi/torch_mist/index", "autoapi/torch_mist/models/encoder/index", "autoapi/torch_mist/models/encoder/mlp/index", "autoapi/torch_mist/models/encoder/slow_updates/index", "autoapi/torch_mist/models/encoder/types/index", "autoapi/torch_mist/models/index", "autoapi/torch_mist/models/learnable_distributions/categorical/index", "autoapi/torch_mist/models/learnable_distributions/index", "autoapi/torch_mist/models/learnable_distributions/transformed_normal/index", "autoapi/torch_mist/nn/index", "autoapi/torch_mist/nn/utils/index", "autoapi/torch_mist/quantization/index", "autoapi/torch_mist/ratio/base/index", "autoapi/torch_mist/ratio/conditional_dist/index", "autoapi/torch_mist/ratio/index", "autoapi/torch_mist/ratio/joint/index", "autoapi/torch_mist/ratio/separable/index", "autoapi/torch_mist/ratio/utils/index", "autoapi/torch_mist/task/index", "autoapi/torch_mist/task/infomax/index", "changelog", "conduct", "contributing", "example", "index"], "filenames": ["autoapi/index.rst", "autoapi/torch_mist/baselines/base/index.rst", "autoapi/torch_mist/baselines/index.rst", "autoapi/torch_mist/distributions/conditional/categorical/index.rst", "autoapi/torch_mist/distributions/conditional/correlated_normal/index.rst", "autoapi/torch_mist/distributions/conditional/index.rst", "autoapi/torch_mist/distributions/index.rst", "autoapi/torch_mist/distributions/parametrizations/index.rst", "autoapi/torch_mist/distributions/parametrizations/map/index.rst", "autoapi/torch_mist/distributions/product/index.rst", "autoapi/torch_mist/distributions/transforms/base/index.rst", "autoapi/torch_mist/distributions/transforms/index.rst", "autoapi/torch_mist/distributions/transforms/linear/index.rst", "autoapi/torch_mist/distributions/transforms/permute/index.rst", "autoapi/torch_mist/distributions/transforms/split/index.rst", "autoapi/torch_mist/distributions/utils/index.rst", "autoapi/torch_mist/estimators/base/index.rst", "autoapi/torch_mist/estimators/discriminative/index.rst", "autoapi/torch_mist/estimators/generative/index.rst", "autoapi/torch_mist/estimators/hybrid/index.rst", "autoapi/torch_mist/estimators/index.rst", "autoapi/torch_mist/index.rst", "autoapi/torch_mist/models/encoder/index.rst", "autoapi/torch_mist/models/encoder/mlp/index.rst", "autoapi/torch_mist/models/encoder/slow_updates/index.rst", "autoapi/torch_mist/models/encoder/types/index.rst", "autoapi/torch_mist/models/index.rst", "autoapi/torch_mist/models/learnable_distributions/categorical/index.rst", "autoapi/torch_mist/models/learnable_distributions/index.rst", "autoapi/torch_mist/models/learnable_distributions/transformed_normal/index.rst", "autoapi/torch_mist/nn/index.rst", "autoapi/torch_mist/nn/utils/index.rst", "autoapi/torch_mist/quantization/index.rst", "autoapi/torch_mist/ratio/base/index.rst", "autoapi/torch_mist/ratio/conditional_dist/index.rst", "autoapi/torch_mist/ratio/index.rst", "autoapi/torch_mist/ratio/joint/index.rst", "autoapi/torch_mist/ratio/separable/index.rst", "autoapi/torch_mist/ratio/utils/index.rst", "autoapi/torch_mist/task/index.rst", "autoapi/torch_mist/task/infomax/index.rst", "changelog.md", "conduct.md", "contributing.md", "example.ipynb", "index.md"], "titles": ["API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.baselines.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.baselines</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions.conditional.categorical</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions.conditional.correlated_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions.conditional</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions.parametrizations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions.parametrizations.map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions.product</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions.transforms.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions.transforms.linear</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions.transforms.permute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions.transforms.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.distributions.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.estimators.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.estimators.discriminative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.estimators.generative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.estimators.hybrid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.estimators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.models.encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.models.encoder.mlp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.models.encoder.slow_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.models.encoder.types</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.models.learnable_distributions.categorical</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.models.learnable_distributions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.models.learnable_distributions.transformed_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.nn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.nn.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.ratio.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.ratio.conditional_dist</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.ratio</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.ratio.joint</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.ratio.separable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.ratio.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.task</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torch_mist.task.infomax</span></code>", "Changelog", "Code of Conduct", "Contributing", "Example usage", "Mist - A PyTorch Mutual information Estimation toolkit"], "terms": {"thi": [0, 1, 2, 4, 11, 12, 13, 14, 16, 18, 19, 20, 22, 24, 25, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 45], "page": 0, "contain": [0, 1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "auto": 0, "gener": [0, 9, 10, 11, 19, 20, 21, 22, 25, 27, 28], "document": 0, "1": [0, 1, 2, 4, 8, 11, 12, 13, 16, 17, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 42, 44], "src": [27, 28, 29, 39, 40], "torch_mist": [0, 41, 43, 44, 45], "baselin": [0, 17, 20, 21], "base": [0, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 45], "distribut": [0, 18, 20, 21, 22, 23, 27, 28, 29, 30, 31, 34], "condit": [0, 6, 10, 11, 12, 21, 22, 23, 27, 28, 30, 31], "categor": [0, 5, 6, 21, 26, 28], "correlated_norm": [0, 5, 6, 21], "joint": [0, 17, 20, 21, 28, 29, 35], "parametr": [0, 6, 21], "map": [0, 6, 7, 21], "transform": [0, 4, 6, 21, 22, 23, 28, 29, 30, 31], "linear": [0, 6, 11, 21, 28, 29], "permut": [0, 6, 11, 21], "split": [0, 6, 11, 21], "product": [0, 6, 21], "util": [0, 6, 21, 30, 35, 39, 40], "estim": [0, 21, 33, 35, 36, 37, 39, 40], "discrimin": [0, 19, 20, 21], "hybrid": [0, 20, 21], "implement": [4, 11, 12, 22, 23, 30, 31], "log_partit": [], "simclr": [], "model": [0, 1, 2, 16, 18, 19, 20, 21, 31, 32, 33, 35, 36, 37, 39, 40], "encod": [0, 16, 20, 21, 26, 39, 40], "mlp": [0, 21, 22, 26], "slow_upd": [0, 21, 22, 26], "type": [0, 3, 4, 5, 8, 10, 11, 12, 13, 16, 20, 21, 22, 26, 27, 28, 39, 40], "learnable_distribut": [0, 21, 26], "transformed_norm": [0, 21, 26, 28], "nn": [0, 1, 2, 3, 5, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 32, 33, 35, 36, 37, 38, 39, 40], "optim": [39, 40], "lr_schedul": [39, 40], "ratio": [0, 16, 17, 20, 21], "conditional_dist": [0, 21, 35], "separ": [0, 17, 20, 21, 35, 42], "task": [0, 21], "infomax": [0, 21, 39], "quantiz": [0, 18, 21], "creat": [0, 3, 4, 5, 10, 11, 13, 27, 28, 42, 43, 45], "sphinx": 0, "autoapi": 0, "arg": [1, 2, 16, 18, 20, 31, 32, 33, 35], "kwarg": [1, 2, 16, 17, 18, 20, 31, 32, 33, 35, 38], "torch": [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40], "all": [1, 2, 11, 12, 14, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43], "neural": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "network": [1, 2, 11, 13, 16, 18, 19, 20, 22, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37], "your": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37, 43], "should": [1, 2, 4, 11, 12, 14, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37, 43], "also": [1, 2, 4, 11, 12, 14, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "subclass": [1, 2, 11, 12, 14, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "can": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37, 43], "other": [1, 2, 11, 13, 16, 18, 19, 20, 22, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 42], "allow": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "nest": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "them": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "tree": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "structur": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "you": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37, 43, 45], "assign": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "submodul": [1, 16, 18, 19, 24, 29, 31, 32, 33, 36, 37], "regular": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "attribut": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "import": [1, 2, 11, 13, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37, 44], "function": [1, 2, 10, 16, 18, 19, 22, 24, 27, 28, 31, 32, 33, 36, 37, 43], "f": [1, 2, 16, 17, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "def": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "__init__": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "self": [1, 2, 8, 10, 11, 16, 18, 19, 20, 22, 24, 27, 28, 29, 31, 32, 33, 35, 36, 37], "super": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "conv1": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "conv2d": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "20": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "5": [1, 2, 16, 17, 18, 19, 20, 22, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37], "conv2": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "forward": [1, 2, 4, 11, 12, 14, 16, 18, 19, 20, 22, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40], "x": [1, 2, 3, 4, 5, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40], "relu": [1, 2, 16, 17, 18, 19, 20, 22, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38], "return": [1, 2, 3, 4, 5, 8, 10, 11, 12, 13, 16, 18, 19, 20, 22, 24, 27, 28, 29, 31, 32, 33, 35, 36, 37], "wai": [1, 2, 3, 4, 5, 10, 11, 16, 18, 19, 20, 22, 24, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42], "regist": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "have": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43], "paramet": [1, 2, 4, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37], "convert": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "too": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "when": [1, 2, 4, 11, 12, 13, 16, 18, 19, 20, 22, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 42, 43], "call": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37, 44], "etc": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "As": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "per": [1, 2, 16, 18, 19, 20, 22, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37], "exampl": [1, 2, 4, 11, 12, 13, 16, 18, 19, 20, 22, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 42], "abov": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "an": [1, 2, 3, 4, 5, 10, 11, 13, 16, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 42], "parent": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "must": [1, 2, 4, 11, 12, 13, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "made": [1, 2, 11, 13, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "befor": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37, 43], "child": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "variabl": [1, 2, 11, 13, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "train": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "bool": [1, 2, 4, 10, 11, 12, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "boolean": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "repres": [1, 2, 4, 8, 11, 12, 13, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37, 42], "whether": [1, 2, 4, 11, 12, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "i": [1, 2, 4, 9, 10, 11, 12, 13, 16, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 42, 43, 45], "evalu": [1, 2, 10, 11, 16, 18, 19, 20, 22, 24, 27, 28, 29, 31, 32, 33, 35, 36, 37], "mode": [1, 2, 16, 18, 19, 20, 22, 24, 28, 29, 31, 32, 33, 35, 36, 37], "abstract": [1, 2, 4, 8, 9, 10, 11, 12, 14, 16, 17, 27, 28], "f_": [1, 2, 17, 20], "tensor": [1, 2, 4, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 22, 24, 27, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40], "y": [1, 2, 4, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 28, 29, 33, 34, 35, 36, 37], "option": [1, 2, 8, 17, 18, 19, 20, 28, 29, 35, 37, 39, 40], "none": [1, 2, 8, 10, 11, 12, 13, 17, 18, 19, 20, 28, 29, 35, 37, 39, 40], "constantbaselin": [1, 2, 17, 20], "valu": [1, 2, 4, 10, 11, 12, 13, 16, 20, 27, 28, 29, 31, 33, 35, 36, 37], "float": [1, 2, 4, 5, 8, 11, 12, 17, 20, 22, 24, 35, 37, 38, 39, 40], "0": [1, 2, 4, 8, 11, 12, 13, 17, 20, 35, 37, 38, 39, 40], "exponentialmovingaverag": [1, 2], "gamma": [1, 2, 17, 20], "9": [1, 2, 17, 20], "batchlogmeanexp": [1, 2], "dim": [1, 2, 11, 13, 30, 31], "learnablebaselin": [1, 2], "net": [1, 2, 3, 5, 11, 12, 31], "learnablemlpbaselin": [1, 2], "x_dim": [1, 2, 17, 20, 28, 29, 35, 38], "int": [1, 2, 4, 6, 8, 11, 12, 13, 15, 17, 20, 22, 23, 27, 28, 29, 30, 31, 32, 35, 38], "hidden_dim": [1, 2, 6, 11, 12, 15, 17, 20, 22, 23, 27, 28, 29, 30, 31, 35, 38], "list": [1, 2, 6, 8, 10, 11, 15, 17, 20, 22, 23, 27, 28, 29, 30, 31, 35, 38], "learnablejointbaselin": [1, 2, 17, 20], "learnablejointmlpbaselin": [1, 2], "y_dim": [1, 2, 17, 20, 27, 28, 29, 35, 38], "interpolatedbaselin": [1, 2], "baseline_1": [1, 2], "baseline_2": [1, 2], "alpha": [1, 2, 17, 20], "alphatubabaselin": 1, "modul": [2, 5, 11, 20, 22, 28, 30, 35, 39, 44], "conditionalcategor": [3, 5, 27, 28], "pyro": [3, 4, 5, 10, 11, 12, 13, 14, 18, 20, 22, 23, 27, 28, 30, 31, 34], "conditionaldistribut": [3, 4, 5, 10, 11, 18, 20, 27, 28, 34], "helper": [3, 4, 5, 10, 11, 13, 27, 28], "provid": [3, 4, 5, 10, 11, 27, 28], "standard": [3, 4, 5, 10, 11, 27, 28], "abc": [3, 4, 5, 10, 11, 27, 28], "us": [3, 4, 5, 10, 11, 12, 13, 14, 22, 23, 27, 28, 30, 31, 42, 43, 44], "inherit": [3, 4, 5, 10, 11, 12, 14, 27, 28], "correlatednorm": [4, 5], "rho": [4, 5], "context": [4, 5, 10, 11, 12, 13], "cubicptransform": 4, "k1": 4, "k3": 4, "invert": [4, 11, 12, 13], "comput": [4, 11, 12, 14, 16, 20, 33, 35, 36, 37], "log": [4, 10, 11, 12, 13, 14, 27, 28], "det": [4, 11, 12, 14], "jacobian": [4, 11, 12, 13, 14], "thei": [4, 11, 12, 14, 42, 43], "ar": [4, 9, 10, 11, 12, 14, 16, 20, 27, 28, 42, 43], "primarili": [4, 11, 12], "transformeddistribut": [4, 11, 12, 13], "cach": [4, 11, 12], "whose": [4, 11, 12], "invers": [4, 11, 12, 14], "either": [4, 11, 12], "expens": [4, 11, 12], "numer": [4, 11, 12], "unstabl": [4, 11, 12], "note": [4, 11, 12, 13, 22, 23, 30, 31, 43, 45], "care": [4, 11, 12], "taken": [4, 11, 12], "memoiz": [4, 11, 12], "sinc": [4, 11, 12, 13], "autograd": [4, 11, 12], "graph": [4, 11, 12], "mai": [4, 11, 12, 42], "revers": [4, 11, 12], "For": [4, 11, 12], "while": [4, 11, 12], "follow": [4, 11, 12, 16, 20, 42], "work": [4, 11, 12, 13, 43], "without": [4, 11, 12, 42], "t": [4, 11, 12, 16, 20], "log_abs_det_jacobian": [4, 11, 12, 13, 14], "backward": [4, 11, 12], "receiv": [4, 11, 12], "gradient": [4, 11, 12], "howev": [4, 11, 12, 13], "error": [4, 11, 12], "due": [4, 11, 12], "depend": [4, 11, 12], "z": [4, 11, 12, 22, 23, 30, 31], "inv": [4, 11, 12], "grad": [4, 11, 12], "sum": [4, 11, 12, 13], "becaus": [4, 11, 12], "deriv": [4, 11, 12, 22, 25], "one": [4, 8, 11, 12], "both": [4, 11, 12, 42], "_call": [4, 11, 12, 13, 14], "_invers": [4, 11, 12, 13, 14], "set": [4, 11, 12, 42, 43], "biject": [4, 11, 12, 13], "true": [1, 2, 4, 10, 11, 12, 17, 20, 35, 38], "cache_s": [4, 11, 12, 13], "size": [4, 9, 10, 11, 12, 22, 23, 27, 28, 29, 30, 31, 42], "If": [4, 11, 12, 43], "zero": [4, 11, 12, 13], "done": [4, 11, 12, 43], "latest": [4, 11, 12], "singl": [4, 11, 12], "onli": [4, 11, 12], "support": [4, 11, 12, 43], "domain": [4, 11, 12, 14], "The": [4, 8, 11, 12, 22, 23, 30, 31, 33, 35, 36, 37, 42, 43], "constraint": [4, 11, 12], "valid": [4, 11, 12], "input": [4, 11, 12, 13, 14, 22, 23, 30, 31], "codomain": [4, 11, 12, 14], "output": [4, 11, 12, 13, 14, 22, 23, 30, 31], "which": [4, 11, 12, 16, 20, 42], "A": [4, 11, 12, 13], "iff": [4, 11, 12], "everi": [4, 11, 12, 43], "least": [4, 11, 12], "maintain": [4, 11, 12, 42], "weaker": [4, 11, 12], "pseudoinvers": [4, 11, 12], "properti": [4, 11, 12, 16, 22, 24, 28, 29, 32], "sign": [4, 11, 12], "univari": [4, 11, 12], "monoton": [4, 11, 12], "increas": [4, 11, 12, 13], "decreas": [4, 11, 12], "method": [4, 8, 11, 12, 14], "dy": [4, 11, 12, 14], "dx": [4, 11, 12, 14], "given": [4, 11, 12, 14, 33, 35, 36, 37, 43], "randomfliptransform": 4, "fals": [4, 11, 12, 17], "cubiccorrelatednorm": [4, 5], "translat": 4, "b": [4, 22, 23, 30, 31, 43], "skewedcorrelatednorm": [4, 5], "conditional_categor": [6, 15], "n_class": [6, 15, 27, 28], "context_dim": [6, 11, 12, 15, 22, 23, 30, 31], "conditional_mutivariate_categor": [6, 15], "output_dim": [6, 15, 22, 23, 35, 38], "jointdistribut": [28, 29], "label": [28, 29], "entropi": [], "union": [8, 10, 11, 39, 40], "str": [8, 10, 11, 18, 28, 29, 35, 38, 39, 40], "sampl": [9, 10, 11, 13, 16, 18, 20, 27, 28, 29], "sample_shap": [9, 10, 11, 27, 28, 29], "dict": [8, 10, 11, 18, 28, 29, 39, 40], "log_prob": [10, 11, 27, 28, 29], "data": [], "epsilon": [8, 11, 12], "1e": [8, 11, 12], "06": [8, 11, 12], "parametermap": 8, "from": [8, 11, 12, 13, 14, 16, 20, 22, 25, 42], "dictionari": 8, "supported_distribut": 8, "n_paramet": 8, "map_paramet": 8, "parameter_list": 8, "respons": 8, "defin": [8, 11, 13, 22, 25, 42], "interest": [8, 42, 45], "name": [8, 43, 44], "__call__": 8, "extra_repr": 8, "__repr__": [8, 10, 11, 17, 18, 20, 27, 28, 31, 39, 40], "repr": [8, 10, 11, 18, 20, 27, 28, 31], "deltamap": 8, "delta": 8, "same": [8, 22, 25, 39, 40], "locat": 8, "locscalemap": 8, "scale": [8, 11, 12], "scale_offset": 8, "logitsmap": 8, "temperaturelogitsmap": 8, "2": 8, "shuffledbatchdistribut": 9, "probabl": [9, 10, 11, 27, 28], "rsampl": [9, 10, 11, 27, 28, 29], "shape": [9, 10, 11, 13, 16, 20, 22, 23, 27, 28, 30, 31], "reparameter": [9, 10, 11, 27, 28], "batch": [9, 10, 11, 27, 28, 39, 40], "distributionmodul": [10, 11, 28, 29], "validate_arg": [10, 11], "conditionaldistributionmodul": [10, 11], "conditionaltransformeddistributionmodul": [10, 11, 28, 29], "base_dist": [10, 11, 13], "conditionaltransform": [10, 11, 12], "conditionaltransformeddistribut": [10, 11], "clear_cach": [10, 11], "transformeddistributionmodul": [10, 11], "densiti": [10, 11, 27, 28], "mass": [10, 11, 27, 28], "input_dim": [11, 12, 13, 14, 22, 23, 28, 29, 30, 31], "loc": [11, 12], "initial_scal": [11, 12], "conditionedlinear": [11, 12], "transformmodul": [11, 12, 13, 14], "_param": [11, 12], "conditionallinear": [11, 12], "skip_connect": [11, 12], "conditionaltransformmodul": [11, 12], "learnabl": [11, 12, 14], "normal": [11, 12, 13, 14], "flow": [11, 12, 14, 22, 23, 30, 31], "rather": [11, 12, 14], "than": [11, 12, 14], "so": [11, 12, 13, 14, 22, 23, 30, 31], "conditional_linear": [11, 12, 28, 29], "conditional_skip_linear": [11, 12], "learn_loc": [11, 12], "splittransform": [11, 14], "out_dim": [11, 14], "dist": [11, 13, 14, 28, 29], "add_dim": [11, 14], "remove_dim": [11, 14], "reorder": [11, 13], "dimens": [11, 13, 22, 23, 30, 31], "multipli": [11, 13], "matrix": [11, 13], "between": [11, 13], "affineautoregress": [11, 13], "flexibl": [11, 13], "result": [11, 13, 39, 40], "stabil": [11, 13], "learn": [11, 13], "whilst": [11, 13], "being": [11, 13], "autoregress": [11, 13, 22, 23, 30, 31], "absolut": [11, 13], "determin": [11, 13, 42], "easili": [11, 13], "calcul": [11, 13], "two": [11, 13, 22, 23, 30, 31], "layer": [11, 13, 22, 23, 30, 31], "equival": [11, 13], "insid": [11, 13], "those": [11, 13], "iaf": [11, 13], "more": [11, 13], "usag": [11, 13, 22, 23, 30, 31], "autoregressivenn": [11, 13], "10": [11, 13, 22, 23, 30, 31], "ones": [11, 13], "iaf1": [11, 13], "40": [11, 13], "ff": [11, 13], "randperm": [11, 13], "dtype": [11, 13], "long": [11, 13], "iaf2": [11, 13], "flow_dist": [11, 13], "longtensor": [11, 13, 32], "order": [11, 13], "appli": [11, 13, 16, 22, 23, 30, 31, 42], "neg": [11, 13], "event": [11, 13, 42], "ab": [11, 13], "update_devic": [11, 13], "invok": [11, 13], "prototyp": [11, 13], "previou": [11, 13], "elementwis": [11, 13], "e": [11, 13, 22, 23, 30, 31, 42], "dy_0": [11, 13], "dx_0": [11, 13], "dy_": [11, 13], "n": [11, 13, 16, 20], "dx_": [11, 13], "express": [11, 13, 42], "turn": [11, 13], "out": [11, 13, 45], "": [11, 13, 16, 20, 42, 43], "alwai": [11, 13, 43], "vector": [11, 13], "object": [11, 13, 16, 20], "consist": [11, 13], "tupl": [11, 13, 39, 40], "correspond": [11, 13], "integ": [11, 13], "indic": [11, 13], "default": [11, 13, 22, 23, 30, 31], "random": [11, 13], "param": [12, 16, 20, 33, 35, 36, 37], "loss": [16, 20], "__add__": 16, "__sub__": 16, "fn": 16, "logratioestim": [16, 20], "log_ratio": [16, 17, 18, 19, 20], "mutualinformationestim": [16, 17, 18, 19, 20, 39, 40], "lower_bound": [16, 17, 20], "upper_bound": [16, 17, 20], "d": [16, 20], "p": [16, 20], "m": [16, 20], "j": [16, 17, 20], "quantiti": [16, 20], "differenti": [16, 20], "maxim": [16, 20], "mutual": [16, 20], "inform": [16, 20, 42], "w": [16, 20], "r": [16, 20], "propos": [16, 20, 43], "compon": [16, 20], "empiricaldistribut": [], "sample_n": [], "n_sampl": [], "discriminativemutualinformationestim": [17, 19, 20], "unnormalized_log_ratio": [17, 20, 35, 38], "unnormalizedratioestim": [17, 20, 33, 34, 35, 36, 37], "mc_sampl": [17, 20], "sample_propos": 17, "_compute_log_ratio": [17, 20], "y_": [17, 20], "_compute_log_ratio_grad": [17, 20], "nwj": [17, 20], "tuba": [17, 20], "grad_baselin": [17, 20], "mine": [17, 20], "infonc": [17, 20], "separableunnormalizedratioestim": [17, 20, 35, 37], "alphatuba": [17, 20], "smile": [17, 20], "tau": [17, 20, 22, 24, 39, 40], "flo": [17, 20], "generativemutualinformationestim": [18, 20], "log_prob_i": [18, 20], "log_prob_y_x": [18, 20], "compute_loss": [18, 20], "log_p_i": [18, 20], "log_p_y_x": [18, 20], "variationalproposalmutualinformationestim": [18, 19, 20], "conditional_y_x": [18, 20, 34], "ba": [18, 20], "marginal_i": [18, 20], "h_y": [18, 20], "doe": [18, 20], "gm": [18, 20], "joint_xi": [18, 20], "marginal_x": [18, 20], "h_x": [18, 20], "log_prob_x": [18, 20], "pq": 18, "conditional_qx_i": 18, "q": 18, "quantizationfunct": [18, 32], "expected_log_ratio": 18, "club": 18, "l1out": 18, "hybridmutualinformationestim": [19, 20], "generative_estim": [19, 20], "discriminative_estim": [19, 20], "n_transform": [28, 29], "conditional_transform_nam": [], "transform_nam": [28, 29], "marginal_transform_nam": [], "n_marginal_transform": [], "neg_sampl": [], "ratio_estim": [], "baseline_hidden_dim": [], "logpartit": [], "ani": [1, 2, 17, 20, 28, 29, 39, 40, 42, 43], "normalizedlogpartit": [], "partit": [], "unnormalizedlogpartit": [], "ellipsi": [], "project": [42, 43, 44, 45], "128": [35, 38], "norm_lay": [], "partial": [], "layernorm": [], "ep": [], "temperatur": [35, 37, 38], "compute_dual_ratio": [], "__version__": [21, 44], "encoderkeyword": [22, 25, 39, 40], "enum": [22, 25], "enumer": [22, 25], "new": [22, 25], "slow": [22, 25], "encodermlp": [22, 23], "densenn": [22, 23, 30, 31], "simpl": [22, 23, 30, 31], "dens": [22, 23, 30, 31], "feedforward": [22, 23, 30, 31], "g": [22, 23, 30, 31], "some": [22, 23, 30, 31], "conditionalplanarflow": [22, 23, 30, 31], "uncondit": [22, 23, 30, 31], "affinecoupl": [22, 23, 30, 31], "do": [22, 23, 30, 31, 42], "requir": [22, 23, 30, 31, 43], "rand": [22, 23, 30, 31], "100": [22, 23, 30, 31], "50": [22, 23, 30, 31], "param_dim": [22, 23, 30, 31], "c": [22, 23, 30, 31], "dimension": [22, 23, 30, 31], "hidden": [22, 23, 30, 31], "unit": [22, 23, 30, 31], "p_n": [22, 23, 30, 31], "nonlinear": [1, 2, 17, 20, 22, 23, 30, 31, 35, 38], "final": [22, 23, 30, 31], "unbound": [22, 23, 30, 31], "real": [22, 23, 30, 31], "number": [22, 23, 30, 31], "slowlyupdatingmodel": [22, 24], "current_model": [22, 24], "_update_weight": [22, 24], "updat": [22, 24, 43], "target": [22, 24], "conditionalcategoricalmlp": [27, 28], "a_dim": [27, 28], "conditionalcategoricallinear": [27, 28], "learnablecategor": [27, 28], "conditionalflowtransformednorm": [28, 29], "transform_param": [28, 29], "flowtransformednorm": [28, 29], "flowtransformedjointnorm": [28, 29], "fetch_transform": 29, "jointdensenn": [30, 31], "constant": 31, "ident": [31, 42], "skipdensenn": 31, "mergeoutput": 31, "warmupschedul": [], "warmup_step": [], "total_step": [], "cosin": [], "lambdalr": [], "rate": [], "each": [], "group": [], "initi": [], "lr": [], "time": [], "last_epoch": [], "wrap": [], "lr_lambda": [], "multipl": [], "factor": [], "epoch": [], "param_group": [], "index": [], "last": 44, "verbos": [], "print": 44, "messag": [], "stdout": [], "xdoctest": [], "skip": [], "assum": [], "ha": [], "lambda1": [], "lambda": [], "30": [], "lambda2": [], "95": [], "schedul": [], "rang": [], "step": [39, 40, 43], "num_bin": 32, "critic": [33, 35, 36, 37, 42], "pair": [33, 35, 36, 37], "conditionaldistributionratio": 34, "jointunnormalizedratioestim": [35, 36], "joint_net": [35, 36], "jointratioestimatormlp": [], "f_x": [35, 37], "f_y": [35, 37], "separableratioestimatormlp": [], "transform_x": [], "transform_i": [], "same_transform": [], "normalize_output": [], "mi_estim": [39, 40], "optimizer_class": [39, 40], "optimizer_init_arg": [39, 40], "lr_scheduler_class": [39, 40], "_lrschedul": [39, 40], "lr_scheduler_init_arg": [39, 40], "lr_scheduler_param": [39, 40], "encoder_x": [39, 40], "encoder_i": [39, 40], "99": [39, 40], "pytorch_lightn": [39, 40], "lightningmodul": [39, 40], "shared_step": [39, 40], "step_output": [39, 40], "log_compon": [39, 40], "training_step": [39, 40], "batch_idx": [39, 40], "validation_step": [39, 40], "test_step": [39, 40], "configure_optim": [39, 40], "first": 41, "releas": [41, 43, 45], "In": [42, 44], "foster": 42, "open": [42, 43], "welcom": [42, 43], "environ": 42, "we": 42, "contributor": 42, "make": [42, 43], "particip": 42, "commun": 42, "harass": 42, "free": [42, 43], "experi": 42, "everyon": 42, "regardless": 42, "ag": 42, "bodi": 42, "disabl": 42, "ethnic": 42, "gender": 42, "level": 42, "nation": 42, "person": 42, "appear": 42, "race": 42, "religion": 42, "sexual": 42, "orient": 42, "behavior": 42, "contribut": 42, "posit": 42, "includ": [42, 43], "inclus": 42, "languag": 42, "Being": 42, "respect": 42, "differ": 42, "viewpoint": 42, "gracefulli": 42, "accept": 42, "construct": 42, "focus": 42, "what": 42, "best": 42, "show": 42, "empathi": 42, "toward": 42, "member": 42, "unaccept": 42, "imageri": 42, "unwelcom": 42, "attent": 42, "advanc": 42, "troll": 42, "insult": 42, "derogatori": 42, "comment": 42, "polit": 42, "attack": 42, "public": 42, "privat": 42, "publish": 42, "physic": 42, "electron": 42, "address": 42, "explicit": 42, "permiss": 42, "could": 42, "reason": 42, "consid": 42, "inappropri": 42, "profession": 42, "clarifi": 42, "expect": 42, "take": 42, "appropri": [42, 43], "fair": 42, "correct": 42, "action": 42, "instanc": 42, "right": 42, "remov": 42, "edit": 42, "reject": 42, "commit": [42, 43], "wiki": 42, "issu": [42, 43], "align": 42, "ban": 42, "temporarili": 42, "perman": 42, "deem": 42, "threaten": 42, "offens": 42, "harm": 42, "within": 42, "space": 42, "individu": 42, "its": [42, 43, 45], "offici": [42, 43], "mail": 42, "post": [42, 43], "via": 42, "social": 42, "media": 42, "account": 42, "act": 42, "appoint": 42, "onlin": 42, "offlin": 42, "represent": 42, "further": 42, "abus": 42, "otherwis": 42, "report": 42, "contact": 42, "team": 42, "review": 42, "investig": 42, "complaint": 42, "respond": 42, "circumst": 42, "oblig": 42, "confidenti": 42, "regard": 42, "incid": 42, "detail": [42, 43], "specif": 42, "polici": 42, "who": 42, "good": 42, "faith": 42, "face": 42, "temporari": 42, "repercuss": 42, "leadership": 42, "adapt": 42, "coven": 42, "homepag": 42, "version": [42, 43], "4": 42, "greatli": 43, "appreci": 43, "littl": 43, "bit": 43, "help": 43, "credit": 43, "pleas": [43, 45], "oper": 43, "system": 43, "about": 43, "local": 43, "setup": 43, "might": 43, "troubleshoot": 43, "reproduc": 43, "look": 43, "through": 43, "github": 43, "anyth": 43, "tag": 43, "want": 43, "whoever": 43, "enhanc": 43, "never": 43, "enough": 43, "feel": 43, "part": 43, "doc": 43, "docstr": 43, "even": 43, "web": 43, "blog": 43, "articl": 43, "explain": 43, "how": 43, "would": 43, "keep": 43, "scope": 43, "narrow": 43, "possibl": 43, "easier": 43, "rememb": 43, "volunt": 43, "driven": 43, "readi": 43, "here": 43, "up": 43, "develop": 43, "download": 43, "copi": 43, "instal": 43, "poetri": 43, "git": 43, "similar": 43, "branch": 43, "chang": 43, "checkout": 43, "bugfix": 43, "re": 43, "check": [43, 45], "conform": 43, "format": 43, "pass": 43, "test": 43, "meet": 43, "addit": 43, "add": 43, "current": 43, "python": 43, "By": [43, 45], "agre": [43, 45], "abid": [43, 45], "term": [43, 45], "To": 44, "modulenotfounderror": 44, "traceback": 44, "most": 44, "recent": 44, "cell": 44, "line": 44, "3": 44, "No": 44, "toolkit": [], "pytorch": [], "pip": 45, "todo": 45, "guidelin": 45, "code": 45, "conduct": 45, "wa": 45, "marco": 45, "federici": 45, "It": 45, "under": 45, "mit": 45, "cookiecutt": 45, "py": 45, "pkg": 45, "templat": 45, "log_ratio_model": [17, 20, 35, 38], "unnormalized_log_ratio_model": [17, 20], "alpha_tuba": [17, 20], "joint_unnormalized_log_ratio": [35, 38], "separable_unnormalized_log_ratio": [35, 38], "projection_head": [35, 38], "symmetr": [35, 38]}, "objects": {"": [[21, 0, 0, "-", "torch_mist"]], "torch_mist": [[21, 1, 1, "", "__version__"], [2, 0, 0, "-", "baselines"], [6, 0, 0, "-", "distributions"], [20, 0, 0, "-", "estimators"], [26, 0, 0, "-", "models"], [30, 0, 0, "-", "nn"], [32, 0, 0, "-", "quantization"], [35, 0, 0, "-", "ratio"], [39, 0, 0, "-", "task"]], "torch_mist.baselines": [[2, 2, 1, "", "Baseline"], [2, 2, 1, "", "BatchLogMeanExp"], [2, 2, 1, "", "ConstantBaseline"], [2, 2, 1, "", "ExponentialMovingAverage"], [2, 2, 1, "", "InterpolatedBaseline"], [2, 2, 1, "", "LearnableBaseline"], [2, 2, 1, "", "LearnableJointBaseline"], [2, 2, 1, "", "LearnableJointMLPBaseline"], [2, 2, 1, "", "LearnableMLPBaseline"], [1, 0, 0, "-", "base"]], "torch_mist.baselines.Baseline": [[2, 3, 1, "", "forward"]], "torch_mist.baselines.BatchLogMeanExp": [[2, 3, 1, "", "forward"]], "torch_mist.baselines.ConstantBaseline": [[2, 3, 1, "", "forward"]], "torch_mist.baselines.ExponentialMovingAverage": [[2, 3, 1, "", "forward"]], "torch_mist.baselines.InterpolatedBaseline": [[2, 3, 1, "", "forward"]], "torch_mist.baselines.LearnableBaseline": [[2, 3, 1, "", "forward"]], "torch_mist.baselines.LearnableJointBaseline": [[2, 3, 1, "", "forward"]], "torch_mist.baselines.base": [[1, 2, 1, "", "AlphaTUBABaseline"], [1, 2, 1, "", "Baseline"], [1, 2, 1, "", "BatchLogMeanExp"], [1, 2, 1, "", "ConstantBaseline"], [1, 2, 1, "", "ExponentialMovingAverage"], [1, 2, 1, "", "InterpolatedBaseline"], [1, 2, 1, "", "LearnableBaseline"], [1, 2, 1, "", "LearnableJointBaseline"], [1, 2, 1, "", "LearnableJointMLPBaseline"], [1, 2, 1, "", "LearnableMLPBaseline"]], "torch_mist.baselines.base.Baseline": [[1, 3, 1, "", "forward"]], "torch_mist.baselines.base.BatchLogMeanExp": [[1, 3, 1, "", "forward"]], "torch_mist.baselines.base.ConstantBaseline": [[1, 3, 1, "", "forward"]], "torch_mist.baselines.base.ExponentialMovingAverage": [[1, 3, 1, "", "forward"]], "torch_mist.baselines.base.InterpolatedBaseline": [[1, 3, 1, "", "forward"]], "torch_mist.baselines.base.LearnableBaseline": [[1, 3, 1, "", "forward"]], "torch_mist.baselines.base.LearnableJointBaseline": [[1, 3, 1, "", "forward"]], "torch_mist.distributions": [[5, 0, 0, "-", "conditional"], [6, 5, 1, "", "conditional_categorical"], [6, 5, 1, "", "conditional_mutivariate_categorical"], [7, 0, 0, "-", "parametrizations"], [9, 0, 0, "-", "product"], [11, 0, 0, "-", "transforms"], [15, 0, 0, "-", "utils"]], "torch_mist.distributions.conditional": [[5, 2, 1, "", "ConditionalCategorical"], [5, 2, 1, "", "CorrelatedNormal"], [5, 2, 1, "", "CubicCorrelatedNormal"], [5, 2, 1, "", "SkewedCorrelatedNormal"], [3, 0, 0, "-", "categorical"], [4, 0, 0, "-", "correlated_normal"]], "torch_mist.distributions.conditional.ConditionalCategorical": [[5, 3, 1, "", "condition"]], "torch_mist.distributions.conditional.CorrelatedNormal": [[5, 3, 1, "", "condition"]], "torch_mist.distributions.conditional.CubicCorrelatedNormal": [[5, 3, 1, "", "condition"]], "torch_mist.distributions.conditional.SkewedCorrelatedNormal": [[5, 3, 1, "", "condition"]], "torch_mist.distributions.conditional.categorical": [[3, 2, 1, "", "ConditionalCategorical"]], "torch_mist.distributions.conditional.categorical.ConditionalCategorical": [[3, 3, 1, "", "condition"]], "torch_mist.distributions.conditional.correlated_normal": [[4, 2, 1, "", "CorrelatedNormal"], [4, 2, 1, "", "CubicCorrelatedNormal"], [4, 2, 1, "", "CubicPTransform"], [4, 2, 1, "", "RandomFlipTransform"], [4, 2, 1, "", "SkewedCorrelatedNormal"], [4, 2, 1, "", "Translate"]], "torch_mist.distributions.conditional.correlated_normal.CorrelatedNormal": [[4, 3, 1, "", "condition"]], "torch_mist.distributions.conditional.correlated_normal.CubicCorrelatedNormal": [[4, 3, 1, "", "condition"]], "torch_mist.distributions.conditional.correlated_normal.CubicPTransform": [[4, 3, 1, "", "_call"], [4, 3, 1, "", "_inverse"], [4, 4, 1, "id0", "bijective"], [4, 4, 1, "id2", "codomain"], [4, 4, 1, "id1", "domain"], [4, 3, 1, "", "log_abs_det_jacobian"], [4, 4, 1, "", "sign"]], "torch_mist.distributions.conditional.correlated_normal.RandomFlipTransform": [[4, 3, 1, "", "_call"], [4, 4, 1, "id3", "bijective"], [4, 4, 1, "id5", "codomain"], [4, 4, 1, "id4", "domain"], [4, 4, 1, "", "sign"]], "torch_mist.distributions.conditional.correlated_normal.SkewedCorrelatedNormal": [[4, 3, 1, "", "condition"]], "torch_mist.distributions.conditional.correlated_normal.Translate": [[4, 3, 1, "", "_call"], [4, 3, 1, "", "_inverse"], [4, 4, 1, "id6", "bijective"], [4, 4, 1, "id8", "codomain"], [4, 4, 1, "id7", "domain"], [4, 3, 1, "", "log_abs_det_jacobian"], [4, 4, 1, "", "sign"]], "torch_mist.distributions.parametrizations": [[8, 0, 0, "-", "map"]], "torch_mist.distributions.parametrizations.map": [[8, 2, 1, "", "DeltaMap"], [8, 1, 1, "", "EPSILON"], [8, 2, 1, "", "LocScaleMap"], [8, 2, 1, "", "LogitsMap"], [8, 2, 1, "", "ParameterMap"], [8, 2, 1, "", "TemperatureLogitsMap"]], "torch_mist.distributions.parametrizations.map.DeltaMap": [[8, 3, 1, "", "map_parameters"], [8, 4, 1, "", "n_parameters"], [8, 4, 1, "", "supported_distributions"]], "torch_mist.distributions.parametrizations.map.LocScaleMap": [[8, 3, 1, "", "map_parameters"], [8, 4, 1, "", "supported_distributions"]], "torch_mist.distributions.parametrizations.map.LogitsMap": [[8, 3, 1, "", "map_parameters"], [8, 4, 1, "", "n_parameters"], [8, 4, 1, "", "supported_distributions"]], "torch_mist.distributions.parametrizations.map.ParameterMap": [[8, 3, 1, "", "__call__"], [8, 3, 1, "", "__repr__"], [8, 3, 1, "", "extra_repr"], [8, 3, 1, "", "map_parameters"], [8, 4, 1, "", "n_parameters"], [8, 4, 1, "", "supported_distributions"]], "torch_mist.distributions.parametrizations.map.TemperatureLogitsMap": [[8, 3, 1, "", "map_parameters"], [8, 4, 1, "", "n_parameters"], [8, 4, 1, "", "supported_distributions"]], "torch_mist.distributions.product": [[9, 2, 1, "", "ShuffledBatchDistribution"]], "torch_mist.distributions.product.ShuffledBatchDistribution": [[9, 3, 1, "", "rsample"], [9, 3, 1, "", "sample"]], "torch_mist.distributions.transforms": [[11, 2, 1, "", "ConditionalDistributionModule"], [11, 2, 1, "", "ConditionalLinear"], [11, 2, 1, "", "ConditionalTransformedDistributionModule"], [11, 2, 1, "", "DistributionModule"], [11, 2, 1, "", "Linear"], [11, 2, 1, "", "Permute"], [11, 2, 1, "", "SplitTransform"], [11, 2, 1, "", "TransformedDistributionModule"], [10, 0, 0, "-", "base"], [11, 5, 1, "", "conditional_linear"], [11, 5, 1, "", "conditional_skip_linear"], [12, 0, 0, "-", "linear"], [13, 0, 0, "-", "permute"], [14, 0, 0, "-", "split"]], "torch_mist.distributions.transforms.ConditionalLinear": [[11, 3, 1, "", "_params"], [11, 4, 1, "", "bijective"], [11, 4, 1, "", "codomain"], [11, 3, 1, "", "condition"], [11, 4, 1, "", "domain"]], "torch_mist.distributions.transforms.ConditionalTransformedDistributionModule": [[11, 3, 1, "", "clear_cache"], [11, 3, 1, "", "condition"]], "torch_mist.distributions.transforms.DistributionModule": [[11, 3, 1, "", "__repr__"]], "torch_mist.distributions.transforms.Linear": [[11, 3, 1, "", "_params"], [11, 4, 1, "", "bijective"], [11, 4, 1, "", "codomain"], [11, 4, 1, "", "domain"], [11, 4, 1, "", "sign"]], "torch_mist.distributions.transforms.Permute": [[11, 3, 1, "", "_call"], [11, 3, 1, "", "_inverse"], [11, 3, 1, "", "log_abs_det_jacobian"], [11, 3, 1, "", "update_device"]], "torch_mist.distributions.transforms.SplitTransform": [[11, 3, 1, "", "_call"], [11, 3, 1, "", "_inverse"], [11, 3, 1, "", "add_dims"], [11, 4, 1, "", "codomain"], [11, 3, 1, "", "dist"], [11, 4, 1, "", "domain"], [11, 3, 1, "", "log_abs_det_jacobian"], [11, 3, 1, "", "remove_dims"]], "torch_mist.distributions.transforms.TransformedDistributionModule": [[11, 3, 1, "", "__repr__"], [11, 3, 1, "", "log_prob"], [11, 3, 1, "", "rsample"]], "torch_mist.distributions.transforms.base": [[10, 2, 1, "", "ConditionalDistributionModule"], [10, 2, 1, "", "ConditionalTransformedDistributionModule"], [10, 2, 1, "", "DistributionModule"], [10, 2, 1, "", "TransformedDistributionModule"]], "torch_mist.distributions.transforms.base.ConditionalTransformedDistributionModule": [[10, 3, 1, "", "clear_cache"], [10, 3, 1, "", "condition"]], "torch_mist.distributions.transforms.base.DistributionModule": [[10, 3, 1, "", "__repr__"]], "torch_mist.distributions.transforms.base.TransformedDistributionModule": [[10, 3, 1, "", "__repr__"], [10, 3, 1, "", "log_prob"], [10, 3, 1, "", "rsample"]], "torch_mist.distributions.transforms.linear": [[12, 2, 1, "", "ConditionalLinear"], [12, 2, 1, "", "ConditionedLinear"], [12, 2, 1, "", "Linear"], [12, 5, 1, "", "conditional_linear"], [12, 5, 1, "", "conditional_skip_linear"], [12, 5, 1, "", "linear"]], "torch_mist.distributions.transforms.linear.ConditionalLinear": [[12, 3, 1, "", "_params"], [12, 4, 1, "", "bijective"], [12, 4, 1, "", "codomain"], [12, 3, 1, "", "condition"], [12, 4, 1, "", "domain"]], "torch_mist.distributions.transforms.linear.ConditionedLinear": [[12, 3, 1, "", "_call"], [12, 3, 1, "", "_inverse"], [12, 4, 1, "id2", "bijective"], [12, 4, 1, "id1", "codomain"], [12, 4, 1, "id0", "domain"], [12, 3, 1, "", "log_abs_det_jacobian"], [12, 4, 1, "", "sign"]], "torch_mist.distributions.transforms.linear.Linear": [[12, 3, 1, "", "_params"], [12, 4, 1, "", "bijective"], [12, 4, 1, "", "codomain"], [12, 4, 1, "", "domain"], [12, 4, 1, "", "sign"]], "torch_mist.distributions.transforms.permute": [[13, 2, 1, "", "Permute"], [13, 5, 1, "", "permute"]], "torch_mist.distributions.transforms.permute.Permute": [[13, 3, 1, "", "_call"], [13, 3, 1, "", "_inverse"], [13, 3, 1, "", "log_abs_det_jacobian"], [13, 3, 1, "", "update_device"]], "torch_mist.distributions.transforms.split": [[14, 2, 1, "", "SplitTransform"]], "torch_mist.distributions.transforms.split.SplitTransform": [[14, 3, 1, "", "_call"], [14, 3, 1, "", "_inverse"], [14, 3, 1, "", "add_dims"], [14, 4, 1, "", "codomain"], [14, 3, 1, "", "dist"], [14, 4, 1, "", "domain"], [14, 3, 1, "", "log_abs_det_jacobian"], [14, 3, 1, "", "remove_dims"]], "torch_mist.distributions.utils": [[15, 5, 1, "", "conditional_categorical"], [15, 5, 1, "", "conditional_mutivariate_categorical"]], "torch_mist.estimators": [[20, 2, 1, "", "AlphaTUBA"], [20, 2, 1, "", "BA"], [20, 2, 1, "", "DoE"], [20, 2, 1, "", "FLO"], [20, 2, 1, "", "GM"], [20, 2, 1, "", "HybridMutualInformationEstimator"], [20, 2, 1, "", "InfoNCE"], [20, 2, 1, "", "JS"], [20, 2, 1, "", "MINE"], [20, 2, 1, "", "MutualInformationEstimator"], [20, 2, 1, "", "NWJ"], [20, 2, 1, "", "SMILE"], [20, 2, 1, "", "TUBA"], [20, 5, 1, "", "alpha_tuba"], [16, 0, 0, "-", "base"], [17, 0, 0, "-", "discriminative"], [20, 5, 1, "", "flo"], [18, 0, 0, "-", "generative"], [19, 0, 0, "-", "hybrid"], [20, 5, 1, "", "infonce"], [20, 5, 1, "", "js"], [20, 5, 1, "", "mine"], [20, 5, 1, "", "nwj"], [20, 5, 1, "", "smile"], [20, 5, 1, "", "tuba"]], "torch_mist.estimators.BA": [[20, 3, 1, "", "compute_loss"], [20, 3, 1, "", "log_prob_y"]], "torch_mist.estimators.DoE": [[20, 3, 1, "", "__repr__"]], "torch_mist.estimators.FLO": [[20, 3, 1, "", "_compute_log_ratio"]], "torch_mist.estimators.GM": [[20, 3, 1, "", "__repr__"], [20, 3, 1, "", "compute_loss"], [20, 3, 1, "", "log_prob_x"], [20, 3, 1, "", "log_prob_y"], [20, 3, 1, "", "log_prob_y_x"]], "torch_mist.estimators.HybridMutualInformationEstimator": [[20, 3, 1, "", "log_ratio"]], "torch_mist.estimators.InfoNCE": [[20, 3, 1, "", "_compute_log_ratio"]], "torch_mist.estimators.JS": [[20, 3, 1, "", "_compute_log_ratio_grad"]], "torch_mist.estimators.MutualInformationEstimator": [[20, 3, 1, "", "forward"], [20, 4, 1, "", "lower_bound"], [20, 4, 1, "", "upper_bound"]], "torch_mist.estimators.NWJ": [[20, 3, 1, "", "_compute_log_ratio"]], "torch_mist.estimators.SMILE": [[20, 3, 1, "", "_compute_log_ratio"], [20, 3, 1, "", "_compute_log_ratio_grad"]], "torch_mist.estimators.TUBA": [[20, 3, 1, "", "_compute_log_ratio"], [20, 3, 1, "", "_compute_log_ratio_grad"]], "torch_mist.estimators.base": [[16, 2, 1, "", "Estimation"], [16, 2, 1, "", "LogRatioEstimator"], [16, 2, 1, "", "MutualInformationEstimator"]], "torch_mist.estimators.base.Estimation": [[16, 3, 1, "", "__add__"], [16, 3, 1, "", "__sub__"], [16, 3, 1, "", "apply"], [16, 4, 1, "", "loss"], [16, 6, 1, "", "shape"], [16, 4, 1, "", "value"]], "torch_mist.estimators.base.LogRatioEstimator": [[16, 3, 1, "", "forward"], [16, 3, 1, "", "log_ratio"]], "torch_mist.estimators.base.MutualInformationEstimator": [[16, 3, 1, "", "forward"], [16, 4, 1, "", "lower_bound"], [16, 4, 1, "", "upper_bound"]], "torch_mist.estimators.discriminative": [[17, 2, 1, "", "AlphaTUBA"], [17, 2, 1, "", "DiscriminativeMutualInformationEstimator"], [17, 2, 1, "", "FLO"], [17, 2, 1, "", "InfoNCE"], [17, 2, 1, "", "JS"], [17, 2, 1, "", "MINE"], [17, 2, 1, "", "NWJ"], [17, 2, 1, "", "SMILE"], [17, 2, 1, "", "TUBA"], [17, 5, 1, "", "alpha_tuba"], [17, 5, 1, "", "flo"], [17, 5, 1, "", "infonce"], [17, 5, 1, "", "js"], [17, 5, 1, "", "mine"], [17, 5, 1, "", "nwj"], [17, 5, 1, "", "smile"], [17, 5, 1, "", "tuba"]], "torch_mist.estimators.discriminative.DiscriminativeMutualInformationEstimator": [[17, 3, 1, "", "__repr__"], [17, 3, 1, "", "_compute_log_ratio"], [17, 3, 1, "", "_compute_log_ratio_grad"], [17, 3, 1, "", "log_ratio"], [17, 4, 1, "", "lower_bound"], [17, 3, 1, "", "sample_proposal"], [17, 4, 1, "", "upper_bound"]], "torch_mist.estimators.discriminative.FLO": [[17, 3, 1, "", "_compute_log_ratio"]], "torch_mist.estimators.discriminative.InfoNCE": [[17, 3, 1, "", "_compute_log_ratio"]], "torch_mist.estimators.discriminative.JS": [[17, 3, 1, "", "_compute_log_ratio_grad"]], "torch_mist.estimators.discriminative.NWJ": [[17, 3, 1, "", "_compute_log_ratio"]], "torch_mist.estimators.discriminative.SMILE": [[17, 3, 1, "", "_compute_log_ratio"], [17, 3, 1, "", "_compute_log_ratio_grad"]], "torch_mist.estimators.discriminative.TUBA": [[17, 3, 1, "", "_compute_log_ratio"], [17, 3, 1, "", "_compute_log_ratio_grad"]], "torch_mist.estimators.generative": [[18, 2, 1, "", "BA"], [18, 2, 1, "", "CLUB"], [18, 2, 1, "", "DoE"], [18, 2, 1, "", "GM"], [18, 2, 1, "", "GenerativeMutualInformationEstimator"], [18, 2, 1, "", "L1Out"], [18, 2, 1, "", "PQ"], [18, 2, 1, "", "VariationalProposalMutualInformationEstimator"]], "torch_mist.estimators.generative.BA": [[18, 3, 1, "", "compute_loss"], [18, 3, 1, "", "log_prob_y"]], "torch_mist.estimators.generative.CLUB": [[18, 3, 1, "", "log_prob_y"]], "torch_mist.estimators.generative.DoE": [[18, 3, 1, "", "__repr__"]], "torch_mist.estimators.generative.GM": [[18, 3, 1, "", "__repr__"], [18, 3, 1, "", "compute_loss"], [18, 3, 1, "", "log_prob_x"], [18, 3, 1, "", "log_prob_y"], [18, 3, 1, "", "log_prob_y_x"]], "torch_mist.estimators.generative.GenerativeMutualInformationEstimator": [[18, 3, 1, "", "compute_loss"], [18, 3, 1, "", "log_prob_y"], [18, 3, 1, "", "log_prob_y_x"], [18, 3, 1, "", "log_ratio"]], "torch_mist.estimators.generative.L1Out": [[18, 3, 1, "", "log_prob_y"]], "torch_mist.estimators.generative.PQ": [[18, 3, 1, "", "__repr__"], [18, 3, 1, "", "expected_log_ratio"], [18, 3, 1, "", "log_prob_y"]], "torch_mist.estimators.generative.VariationalProposalMutualInformationEstimator": [[18, 3, 1, "", "__repr__"], [18, 3, 1, "", "compute_loss"], [18, 3, 1, "", "log_prob_y_x"]], "torch_mist.estimators.hybrid": [[19, 2, 1, "", "HybridMutualInformationEstimator"]], "torch_mist.estimators.hybrid.HybridMutualInformationEstimator": [[19, 3, 1, "", "log_ratio"]], "torch_mist.models": [[22, 0, 0, "-", "encoder"], [28, 0, 0, "-", "learnable_distributions"]], "torch_mist.models.encoder": [[22, 2, 1, "", "EncoderKeywords"], [22, 2, 1, "", "EncoderMLP"], [22, 2, 1, "", "SlowlyUpdatingModel"], [23, 0, 0, "-", "mlp"], [24, 0, 0, "-", "slow_updates"], [25, 0, 0, "-", "types"]], "torch_mist.models.encoder.EncoderKeywords": [[22, 4, 1, "", "same"], [22, 4, 1, "", "slow"]], "torch_mist.models.encoder.SlowlyUpdatingModel": [[22, 3, 1, "", "_update_weights"], [22, 6, 1, "", "current_model"], [22, 3, 1, "", "forward"]], "torch_mist.models.encoder.mlp": [[23, 2, 1, "", "EncoderMLP"]], "torch_mist.models.encoder.slow_updates": [[24, 2, 1, "", "SlowlyUpdatingModel"]], "torch_mist.models.encoder.slow_updates.SlowlyUpdatingModel": [[24, 3, 1, "", "_update_weights"], [24, 6, 1, "", "current_model"], [24, 3, 1, "", "forward"]], "torch_mist.models.encoder.types": [[25, 2, 1, "", "EncoderKeywords"]], "torch_mist.models.encoder.types.EncoderKeywords": [[25, 4, 1, "", "same"], [25, 4, 1, "", "slow"]], "torch_mist.models.learnable_distributions": [[28, 2, 1, "", "ConditionalCategoricalLinear"], [28, 2, 1, "", "ConditionalCategoricalMLP"], [28, 2, 1, "", "ConditionalFlowTransformedNormal"], [28, 2, 1, "", "FlowTransformedJointNormal"], [28, 2, 1, "", "FlowTransformedNormal"], [28, 2, 1, "", "LearnableCategorical"], [27, 0, 0, "-", "categorical"], [29, 0, 0, "-", "transformed_normal"]], "torch_mist.models.learnable_distributions.ConditionalCategoricalLinear": [[28, 3, 1, "", "condition"]], "torch_mist.models.learnable_distributions.FlowTransformedJointNormal": [[28, 6, 1, "", "dist"], [28, 4, 1, "", "labels"], [28, 3, 1, "", "log_prob"], [28, 3, 1, "", "rsample"], [28, 3, 1, "", "sample"]], "torch_mist.models.learnable_distributions.FlowTransformedNormal": [[28, 6, 1, "", "dist"], [28, 3, 1, "", "log_prob"], [28, 3, 1, "", "rsample"], [28, 3, 1, "", "sample"]], "torch_mist.models.learnable_distributions.LearnableCategorical": [[28, 3, 1, "", "__repr__"], [28, 3, 1, "", "log_prob"], [28, 3, 1, "", "rsample"], [28, 3, 1, "", "sample"]], "torch_mist.models.learnable_distributions.categorical": [[27, 2, 1, "", "ConditionalCategoricalLinear"], [27, 2, 1, "", "ConditionalCategoricalMLP"], [27, 2, 1, "", "LearnableCategorical"]], "torch_mist.models.learnable_distributions.categorical.ConditionalCategoricalLinear": [[27, 3, 1, "", "condition"]], "torch_mist.models.learnable_distributions.categorical.LearnableCategorical": [[27, 3, 1, "", "__repr__"], [27, 3, 1, "", "log_prob"], [27, 3, 1, "", "rsample"], [27, 3, 1, "", "sample"]], "torch_mist.models.learnable_distributions.transformed_normal": [[29, 2, 1, "", "ConditionalFlowTransformedNormal"], [29, 2, 1, "", "FlowTransformedJointNormal"], [29, 2, 1, "", "FlowTransformedNormal"], [29, 5, 1, "", "fetch_transform"]], "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedJointNormal": [[29, 6, 1, "", "dist"], [29, 4, 1, "", "labels"], [29, 3, 1, "", "log_prob"], [29, 3, 1, "", "rsample"], [29, 3, 1, "", "sample"]], "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedNormal": [[29, 6, 1, "", "dist"], [29, 3, 1, "", "log_prob"], [29, 3, 1, "", "rsample"], [29, 3, 1, "", "sample"]], "torch_mist.nn": [[30, 2, 1, "", "JointDenseNN"], [31, 0, 0, "-", "utils"]], "torch_mist.nn.JointDenseNN": [[30, 3, 1, "", "forward"]], "torch_mist.nn.utils": [[31, 2, 1, "", "Constant"], [31, 2, 1, "", "Identity"], [31, 2, 1, "", "JointDenseNN"], [31, 2, 1, "", "MergeOutputs"], [31, 2, 1, "", "SkipDenseNN"]], "torch_mist.nn.utils.Constant": [[31, 3, 1, "", "__repr__"], [31, 3, 1, "", "forward"]], "torch_mist.nn.utils.Identity": [[31, 3, 1, "", "forward"]], "torch_mist.nn.utils.JointDenseNN": [[31, 3, 1, "", "forward"]], "torch_mist.nn.utils.MergeOutputs": [[31, 3, 1, "", "forward"]], "torch_mist.nn.utils.SkipDenseNN": [[31, 3, 1, "", "forward"]], "torch_mist.quantization": [[32, 2, 1, "", "QuantizationFunction"]], "torch_mist.quantization.QuantizationFunction": [[32, 3, 1, "", "forward"], [32, 6, 1, "", "num_bins"]], "torch_mist.ratio": [[35, 2, 1, "", "JointUnnormalizedRatioEstimator"], [35, 2, 1, "", "SeparableUnnormalizedRatioEstimator"], [35, 2, 1, "", "UnnormalizedRatioEstimator"], [33, 0, 0, "-", "base"], [34, 0, 0, "-", "conditional_dist"], [36, 0, 0, "-", "joint"], [35, 5, 1, "", "joint_unnormalized_log_ratio"], [37, 0, 0, "-", "separable"], [35, 5, 1, "", "separable_unnormalized_log_ratio"], [35, 5, 1, "", "unnormalized_log_ratio"], [38, 0, 0, "-", "utils"]], "torch_mist.ratio.JointUnnormalizedRatioEstimator": [[35, 3, 1, "", "forward"]], "torch_mist.ratio.SeparableUnnormalizedRatioEstimator": [[35, 3, 1, "", "forward"]], "torch_mist.ratio.UnnormalizedRatioEstimator": [[35, 3, 1, "", "forward"]], "torch_mist.ratio.base": [[33, 2, 1, "", "UnnormalizedRatioEstimator"]], "torch_mist.ratio.base.UnnormalizedRatioEstimator": [[33, 3, 1, "", "forward"]], "torch_mist.ratio.conditional_dist": [[34, 2, 1, "", "ConditionalDistributionRatio"]], "torch_mist.ratio.conditional_dist.ConditionalDistributionRatio": [[34, 3, 1, "", "forward"]], "torch_mist.ratio.joint": [[36, 2, 1, "", "JointUnnormalizedRatioEstimator"]], "torch_mist.ratio.joint.JointUnnormalizedRatioEstimator": [[36, 3, 1, "", "forward"]], "torch_mist.ratio.separable": [[37, 2, 1, "", "SeparableUnnormalizedRatioEstimator"]], "torch_mist.ratio.separable.SeparableUnnormalizedRatioEstimator": [[37, 3, 1, "", "forward"]], "torch_mist.ratio.utils": [[38, 5, 1, "", "joint_unnormalized_log_ratio"], [38, 5, 1, "", "separable_unnormalized_log_ratio"], [38, 5, 1, "", "unnormalized_log_ratio"]], "torch_mist.task": [[39, 2, 1, "", "InfoMax"], [40, 0, 0, "-", "infomax"]], "torch_mist.task.InfoMax": [[39, 3, 1, "", "__repr__"], [39, 3, 1, "", "configure_optimizers"], [39, 3, 1, "", "forward"], [39, 3, 1, "", "log_components"], [39, 3, 1, "", "shared_step"], [39, 3, 1, "", "test_step"], [39, 3, 1, "", "training_step"], [39, 3, 1, "", "validation_step"]], "torch_mist.task.infomax": [[40, 2, 1, "", "InfoMax"]], "torch_mist.task.infomax.InfoMax": [[40, 3, 1, "", "__repr__"], [40, 3, 1, "", "configure_optimizers"], [40, 3, 1, "", "forward"], [40, 3, 1, "", "log_components"], [40, 3, 1, "", "shared_step"], [40, 3, 1, "", "test_step"], [40, 3, 1, "", "training_step"], [40, 3, 1, "", "validation_step"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:function", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "titleterms": {"api": 0, "refer": 0, "src": [], "subpackag": [6, 21, 26], "torch_mist": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "baselin": [1, 2], "base": [1, 10, 16, 33], "modul": [1, 3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 27, 29, 31, 32, 33, 34, 36, 37, 38, 40], "content": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "class": [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40], "submodul": [2, 5, 6, 7, 11, 20, 21, 22, 28, 30, 35, 39], "packag": [2, 5, 6, 11, 20, 21, 22, 28, 30, 35, 39], "distribut": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "condit": [3, 4, 5], "categor": [3, 27], "correlated_norm": 4, "function": [6, 11, 12, 13, 15, 17, 20, 29, 35, 38], "joint": 36, "parametr": [7, 8], "map": 8, "attribut": [8, 42], "product": 9, "transform": [10, 11, 12, 13, 14], "linear": 12, "permut": 13, "split": 14, "util": [15, 31, 38], "estim": [16, 17, 18, 19, 20, 45], "discrimin": 17, "gener": 18, "hybrid": 19, "implement": 43, "log_partit": [], "simclr": [], "model": [22, 23, 24, 25, 26, 27, 28, 29], "encod": [22, 23, 24, 25], "mlp": 23, "slow_upd": 24, "type": [25, 43], "learnable_distribut": [27, 28, 29], "transformed_norm": 29, "nn": [30, 31], "optim": [], "lr_schedul": [], "quantiz": 32, "ratio": [33, 34, 35, 36, 37, 38], "conditional_dist": 34, "separ": 37, "task": [39, 40], "infomax": 40, "changelog": 41, "v0": 41, "1": 41, "0": 41, "20": 41, "06": 41, "2023": 41, "code": [42, 43], "conduct": [42, 43], "our": 42, "pledg": 42, "standard": 42, "respons": 42, "scope": 42, "enforc": 42, "contribut": [43, 45], "report": 43, "bug": 43, "fix": 43, "featur": 43, "write": 43, "document": 43, "submit": 43, "feedback": 43, "get": 43, "start": 43, "pull": 43, "request": 43, "guidelin": 43, "exampl": 44, "usag": [44, 45], "instal": 45, "licens": 45, "credit": 45, "mist": 45, "A": 45, "pytorch": 45, "mutual": 45, "inform": 45, "toolkit": 45}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "torch_mist.baselines.base": [[1, "module-torch_mist.baselines.base"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [4, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [40, "module-contents"]], "Classes": [[1, "classes"], [2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [39, "classes"], [40, "classes"]], "torch_mist.baselines": [[2, "module-torch_mist.baselines"]], "Submodules": [[2, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"], [11, "submodules"], [20, "submodules"], [21, "submodules"], [22, "submodules"], [28, "submodules"], [30, "submodules"], [35, "submodules"], [39, "submodules"]], "Package Contents": [[2, "package-contents"], [5, "package-contents"], [6, "package-contents"], [11, "package-contents"], [20, "package-contents"], [21, "package-contents"], [22, "package-contents"], [28, "package-contents"], [30, "package-contents"], [35, "package-contents"], [39, "package-contents"]], "torch_mist.distributions.conditional.categorical": [[3, "module-torch_mist.distributions.conditional.categorical"]], "torch_mist.distributions.conditional.correlated_normal": [[4, "module-torch_mist.distributions.conditional.correlated_normal"]], "torch_mist.distributions.conditional": [[5, "module-torch_mist.distributions.conditional"]], "torch_mist.distributions": [[6, "module-torch_mist.distributions"]], "Subpackages": [[6, "subpackages"], [21, "subpackages"], [26, "subpackages"]], "Functions": [[6, "functions"], [11, "functions"], [12, "functions"], [13, "functions"], [15, "functions"], [17, "functions"], [20, "functions"], [29, "functions"], [35, "functions"], [38, "functions"]], "torch_mist.distributions.parametrizations": [[7, "module-torch_mist.distributions.parametrizations"]], "torch_mist.distributions.parametrizations.map": [[8, "module-torch_mist.distributions.parametrizations.map"]], "Attributes": [[8, "attributes"]], "torch_mist.distributions.product": [[9, "module-torch_mist.distributions.product"]], "torch_mist.distributions.transforms.base": [[10, "module-torch_mist.distributions.transforms.base"]], "torch_mist.distributions.transforms": [[11, "module-torch_mist.distributions.transforms"]], "torch_mist.distributions.transforms.linear": [[12, "module-torch_mist.distributions.transforms.linear"]], "torch_mist.distributions.transforms.permute": [[13, "module-torch_mist.distributions.transforms.permute"]], "torch_mist.distributions.transforms.split": [[14, "module-torch_mist.distributions.transforms.split"]], "torch_mist.distributions.utils": [[15, "module-torch_mist.distributions.utils"]], "torch_mist.estimators.base": [[16, "module-torch_mist.estimators.base"]], "torch_mist.estimators.discriminative": [[17, "module-torch_mist.estimators.discriminative"]], "torch_mist.estimators.generative": [[18, "module-torch_mist.estimators.generative"]], "torch_mist.estimators.hybrid": [[19, "module-torch_mist.estimators.hybrid"]], "torch_mist.estimators": [[20, "module-torch_mist.estimators"]], "torch_mist": [[21, "module-torch_mist"]], "torch_mist.models.encoder": [[22, "module-torch_mist.models.encoder"]], "torch_mist.models.encoder.mlp": [[23, "module-torch_mist.models.encoder.mlp"]], "torch_mist.models.encoder.slow_updates": [[24, "module-torch_mist.models.encoder.slow_updates"]], "torch_mist.models.encoder.types": [[25, "module-torch_mist.models.encoder.types"]], "torch_mist.models": [[26, "module-torch_mist.models"]], "torch_mist.models.learnable_distributions.categorical": [[27, "module-torch_mist.models.learnable_distributions.categorical"]], "torch_mist.models.learnable_distributions": [[28, "module-torch_mist.models.learnable_distributions"]], "torch_mist.models.learnable_distributions.transformed_normal": [[29, "module-torch_mist.models.learnable_distributions.transformed_normal"]], "torch_mist.nn": [[30, "module-torch_mist.nn"]], "torch_mist.nn.utils": [[31, "module-torch_mist.nn.utils"]], "torch_mist.quantization": [[32, "module-torch_mist.quantization"]], "torch_mist.ratio.base": [[33, "module-torch_mist.ratio.base"]], "torch_mist.ratio.conditional_dist": [[34, "module-torch_mist.ratio.conditional_dist"]], "torch_mist.ratio": [[35, "module-torch_mist.ratio"]], "torch_mist.ratio.joint": [[36, "module-torch_mist.ratio.joint"]], "torch_mist.ratio.separable": [[37, "module-torch_mist.ratio.separable"]], "torch_mist.ratio.utils": [[38, "module-torch_mist.ratio.utils"]], "torch_mist.task": [[39, "module-torch_mist.task"]], "torch_mist.task.infomax": [[40, "module-torch_mist.task.infomax"]], "Changelog": [[41, "changelog"]], "v0.1.0 (20/06/2023)": [[41, "v0-1-0-20-06-2023"]], "Code of Conduct": [[42, "code-of-conduct"], [43, "code-of-conduct"]], "Our Pledge": [[42, "our-pledge"]], "Our Standards": [[42, "our-standards"]], "Our Responsibilities": [[42, "our-responsibilities"]], "Scope": [[42, "scope"]], "Enforcement": [[42, "enforcement"]], "Attribution": [[42, "attribution"]], "Contributing": [[43, "contributing"], [45, "contributing"]], "Types of Contributions": [[43, "types-of-contributions"]], "Report Bugs": [[43, "report-bugs"]], "Fix Bugs": [[43, "fix-bugs"]], "Implement Features": [[43, "implement-features"]], "Write Documentation": [[43, "write-documentation"]], "Submit Feedback": [[43, "submit-feedback"]], "Get Started!": [[43, "get-started"]], "Pull Request Guidelines": [[43, "pull-request-guidelines"]], "Example usage": [[44, "example-usage"]], "Mist - A PyTorch Mutual information Estimation toolkit": [[45, "mist-a-pytorch-mutual-information-estimation-toolkit"]], "Installation": [[45, "installation"]], "Usage": [[45, "usage"]], "License": [[45, "license"]], "Credits": [[45, "credits"]]}, "indexentries": {"alphatubabaseline (class in torch_mist.baselines.base)": [[1, "torch_mist.baselines.base.AlphaTUBABaseline"]], "baseline (class in torch_mist.baselines.base)": [[1, "torch_mist.baselines.base.Baseline"]], "batchlogmeanexp (class in torch_mist.baselines.base)": [[1, "torch_mist.baselines.base.BatchLogMeanExp"]], "constantbaseline (class in torch_mist.baselines.base)": [[1, "torch_mist.baselines.base.ConstantBaseline"]], "exponentialmovingaverage (class in torch_mist.baselines.base)": [[1, "torch_mist.baselines.base.ExponentialMovingAverage"]], "interpolatedbaseline (class in torch_mist.baselines.base)": [[1, "torch_mist.baselines.base.InterpolatedBaseline"]], "learnablebaseline (class in torch_mist.baselines.base)": [[1, "torch_mist.baselines.base.LearnableBaseline"]], "learnablejointbaseline (class in torch_mist.baselines.base)": [[1, "torch_mist.baselines.base.LearnableJointBaseline"]], "learnablejointmlpbaseline (class in torch_mist.baselines.base)": [[1, "torch_mist.baselines.base.LearnableJointMLPBaseline"]], "learnablemlpbaseline (class in torch_mist.baselines.base)": [[1, "torch_mist.baselines.base.LearnableMLPBaseline"]], "forward() (torch_mist.baselines.base.baseline method)": [[1, "torch_mist.baselines.base.Baseline.forward"]], "forward() (torch_mist.baselines.base.batchlogmeanexp method)": [[1, "torch_mist.baselines.base.BatchLogMeanExp.forward"]], "forward() (torch_mist.baselines.base.constantbaseline method)": [[1, "torch_mist.baselines.base.ConstantBaseline.forward"]], "forward() (torch_mist.baselines.base.exponentialmovingaverage method)": [[1, "torch_mist.baselines.base.ExponentialMovingAverage.forward"]], "forward() (torch_mist.baselines.base.interpolatedbaseline method)": [[1, "torch_mist.baselines.base.InterpolatedBaseline.forward"]], "forward() (torch_mist.baselines.base.learnablebaseline method)": [[1, "torch_mist.baselines.base.LearnableBaseline.forward"]], "forward() (torch_mist.baselines.base.learnablejointbaseline method)": [[1, "torch_mist.baselines.base.LearnableJointBaseline.forward"]], "module": [[1, "module-torch_mist.baselines.base"], [2, "module-torch_mist.baselines"], [3, "module-torch_mist.distributions.conditional.categorical"], [4, "module-torch_mist.distributions.conditional.correlated_normal"], [5, "module-torch_mist.distributions.conditional"], [6, "module-torch_mist.distributions"], [7, "module-torch_mist.distributions.parametrizations"], [8, "module-torch_mist.distributions.parametrizations.map"], [9, "module-torch_mist.distributions.product"], [10, "module-torch_mist.distributions.transforms.base"], [11, "module-torch_mist.distributions.transforms"], [12, "module-torch_mist.distributions.transforms.linear"], [13, "module-torch_mist.distributions.transforms.permute"], [14, "module-torch_mist.distributions.transforms.split"], [15, "module-torch_mist.distributions.utils"], [16, "module-torch_mist.estimators.base"], [17, "module-torch_mist.estimators.discriminative"], [18, "module-torch_mist.estimators.generative"], [19, "module-torch_mist.estimators.hybrid"], [20, "module-torch_mist.estimators"], [21, "module-torch_mist"], [22, "module-torch_mist.models.encoder"], [23, "module-torch_mist.models.encoder.mlp"], [24, "module-torch_mist.models.encoder.slow_updates"], [25, "module-torch_mist.models.encoder.types"], [26, "module-torch_mist.models"], [27, "module-torch_mist.models.learnable_distributions.categorical"], [28, "module-torch_mist.models.learnable_distributions"], [29, "module-torch_mist.models.learnable_distributions.transformed_normal"], [30, "module-torch_mist.nn"], [31, "module-torch_mist.nn.utils"], [32, "module-torch_mist.quantization"], [33, "module-torch_mist.ratio.base"], [34, "module-torch_mist.ratio.conditional_dist"], [35, "module-torch_mist.ratio"], [36, "module-torch_mist.ratio.joint"], [37, "module-torch_mist.ratio.separable"], [38, "module-torch_mist.ratio.utils"], [39, "module-torch_mist.task"], [40, "module-torch_mist.task.infomax"]], "torch_mist.baselines.base": [[1, "module-torch_mist.baselines.base"]], "baseline (class in torch_mist.baselines)": [[2, "torch_mist.baselines.Baseline"]], "batchlogmeanexp (class in torch_mist.baselines)": [[2, "torch_mist.baselines.BatchLogMeanExp"]], "constantbaseline (class in torch_mist.baselines)": [[2, "torch_mist.baselines.ConstantBaseline"]], "exponentialmovingaverage (class in torch_mist.baselines)": [[2, "torch_mist.baselines.ExponentialMovingAverage"]], "interpolatedbaseline (class in torch_mist.baselines)": [[2, "torch_mist.baselines.InterpolatedBaseline"]], "learnablebaseline (class in torch_mist.baselines)": [[2, "torch_mist.baselines.LearnableBaseline"]], "learnablejointbaseline (class in torch_mist.baselines)": [[2, "torch_mist.baselines.LearnableJointBaseline"]], "learnablejointmlpbaseline (class in torch_mist.baselines)": [[2, "torch_mist.baselines.LearnableJointMLPBaseline"]], "learnablemlpbaseline (class in torch_mist.baselines)": [[2, "torch_mist.baselines.LearnableMLPBaseline"]], "forward() (torch_mist.baselines.baseline method)": [[2, "torch_mist.baselines.Baseline.forward"]], "forward() (torch_mist.baselines.batchlogmeanexp method)": [[2, "torch_mist.baselines.BatchLogMeanExp.forward"]], "forward() (torch_mist.baselines.constantbaseline method)": [[2, "torch_mist.baselines.ConstantBaseline.forward"]], "forward() (torch_mist.baselines.exponentialmovingaverage method)": [[2, "torch_mist.baselines.ExponentialMovingAverage.forward"]], "forward() (torch_mist.baselines.interpolatedbaseline method)": [[2, "torch_mist.baselines.InterpolatedBaseline.forward"]], "forward() (torch_mist.baselines.learnablebaseline method)": [[2, "torch_mist.baselines.LearnableBaseline.forward"]], "forward() (torch_mist.baselines.learnablejointbaseline method)": [[2, "torch_mist.baselines.LearnableJointBaseline.forward"]], "torch_mist.baselines": [[2, "module-torch_mist.baselines"]], "conditionalcategorical (class in torch_mist.distributions.conditional.categorical)": [[3, "torch_mist.distributions.conditional.categorical.ConditionalCategorical"]], "condition() (torch_mist.distributions.conditional.categorical.conditionalcategorical method)": [[3, "torch_mist.distributions.conditional.categorical.ConditionalCategorical.condition"]], "torch_mist.distributions.conditional.categorical": [[3, "module-torch_mist.distributions.conditional.categorical"]], "correlatednormal (class in torch_mist.distributions.conditional.correlated_normal)": [[4, "torch_mist.distributions.conditional.correlated_normal.CorrelatedNormal"]], "cubiccorrelatednormal (class in torch_mist.distributions.conditional.correlated_normal)": [[4, "torch_mist.distributions.conditional.correlated_normal.CubicCorrelatedNormal"]], "cubicptransform (class in torch_mist.distributions.conditional.correlated_normal)": [[4, "torch_mist.distributions.conditional.correlated_normal.CubicPTransform"]], "randomfliptransform (class in torch_mist.distributions.conditional.correlated_normal)": [[4, "torch_mist.distributions.conditional.correlated_normal.RandomFlipTransform"]], "skewedcorrelatednormal (class in torch_mist.distributions.conditional.correlated_normal)": [[4, "torch_mist.distributions.conditional.correlated_normal.SkewedCorrelatedNormal"]], "translate (class in torch_mist.distributions.conditional.correlated_normal)": [[4, "torch_mist.distributions.conditional.correlated_normal.Translate"]], "_call() (torch_mist.distributions.conditional.correlated_normal.cubicptransform method)": [[4, "torch_mist.distributions.conditional.correlated_normal.CubicPTransform._call"]], "_call() (torch_mist.distributions.conditional.correlated_normal.randomfliptransform method)": [[4, "torch_mist.distributions.conditional.correlated_normal.RandomFlipTransform._call"]], "_call() (torch_mist.distributions.conditional.correlated_normal.translate method)": [[4, "torch_mist.distributions.conditional.correlated_normal.Translate._call"]], "_inverse() (torch_mist.distributions.conditional.correlated_normal.cubicptransform method)": [[4, "torch_mist.distributions.conditional.correlated_normal.CubicPTransform._inverse"]], "_inverse() (torch_mist.distributions.conditional.correlated_normal.translate method)": [[4, "torch_mist.distributions.conditional.correlated_normal.Translate._inverse"]], "bijective (torch_mist.distributions.conditional.correlated_normal.cubicptransform attribute)": [[4, "id0"], [4, "torch_mist.distributions.conditional.correlated_normal.CubicPTransform.bijective"]], "bijective (torch_mist.distributions.conditional.correlated_normal.randomfliptransform attribute)": [[4, "id3"], [4, "torch_mist.distributions.conditional.correlated_normal.RandomFlipTransform.bijective"]], "bijective (torch_mist.distributions.conditional.correlated_normal.translate attribute)": [[4, "id6"], [4, "torch_mist.distributions.conditional.correlated_normal.Translate.bijective"]], "codomain (torch_mist.distributions.conditional.correlated_normal.cubicptransform attribute)": [[4, "id2"], [4, "torch_mist.distributions.conditional.correlated_normal.CubicPTransform.codomain"]], "codomain (torch_mist.distributions.conditional.correlated_normal.randomfliptransform attribute)": [[4, "id5"], [4, "torch_mist.distributions.conditional.correlated_normal.RandomFlipTransform.codomain"]], "codomain (torch_mist.distributions.conditional.correlated_normal.translate attribute)": [[4, "id8"], [4, "torch_mist.distributions.conditional.correlated_normal.Translate.codomain"]], "condition() (torch_mist.distributions.conditional.correlated_normal.correlatednormal method)": [[4, "torch_mist.distributions.conditional.correlated_normal.CorrelatedNormal.condition"]], "condition() (torch_mist.distributions.conditional.correlated_normal.cubiccorrelatednormal method)": [[4, "torch_mist.distributions.conditional.correlated_normal.CubicCorrelatedNormal.condition"]], "condition() (torch_mist.distributions.conditional.correlated_normal.skewedcorrelatednormal method)": [[4, "torch_mist.distributions.conditional.correlated_normal.SkewedCorrelatedNormal.condition"]], "domain (torch_mist.distributions.conditional.correlated_normal.cubicptransform attribute)": [[4, "id1"], [4, "torch_mist.distributions.conditional.correlated_normal.CubicPTransform.domain"]], "domain (torch_mist.distributions.conditional.correlated_normal.randomfliptransform attribute)": [[4, "id4"], [4, "torch_mist.distributions.conditional.correlated_normal.RandomFlipTransform.domain"]], "domain (torch_mist.distributions.conditional.correlated_normal.translate attribute)": [[4, "id7"], [4, "torch_mist.distributions.conditional.correlated_normal.Translate.domain"]], "log_abs_det_jacobian() (torch_mist.distributions.conditional.correlated_normal.cubicptransform method)": [[4, "torch_mist.distributions.conditional.correlated_normal.CubicPTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torch_mist.distributions.conditional.correlated_normal.translate method)": [[4, "torch_mist.distributions.conditional.correlated_normal.Translate.log_abs_det_jacobian"]], "sign (torch_mist.distributions.conditional.correlated_normal.cubicptransform attribute)": [[4, "torch_mist.distributions.conditional.correlated_normal.CubicPTransform.sign"]], "sign (torch_mist.distributions.conditional.correlated_normal.randomfliptransform attribute)": [[4, "torch_mist.distributions.conditional.correlated_normal.RandomFlipTransform.sign"]], "sign (torch_mist.distributions.conditional.correlated_normal.translate attribute)": [[4, "torch_mist.distributions.conditional.correlated_normal.Translate.sign"]], "torch_mist.distributions.conditional.correlated_normal": [[4, "module-torch_mist.distributions.conditional.correlated_normal"]], "conditionalcategorical (class in torch_mist.distributions.conditional)": [[5, "torch_mist.distributions.conditional.ConditionalCategorical"]], "correlatednormal (class in torch_mist.distributions.conditional)": [[5, "torch_mist.distributions.conditional.CorrelatedNormal"]], "cubiccorrelatednormal (class in torch_mist.distributions.conditional)": [[5, "torch_mist.distributions.conditional.CubicCorrelatedNormal"]], "skewedcorrelatednormal (class in torch_mist.distributions.conditional)": [[5, "torch_mist.distributions.conditional.SkewedCorrelatedNormal"]], "condition() (torch_mist.distributions.conditional.conditionalcategorical method)": [[5, "torch_mist.distributions.conditional.ConditionalCategorical.condition"]], "condition() (torch_mist.distributions.conditional.correlatednormal method)": [[5, "torch_mist.distributions.conditional.CorrelatedNormal.condition"]], "condition() (torch_mist.distributions.conditional.cubiccorrelatednormal method)": [[5, "torch_mist.distributions.conditional.CubicCorrelatedNormal.condition"]], "condition() (torch_mist.distributions.conditional.skewedcorrelatednormal method)": [[5, "torch_mist.distributions.conditional.SkewedCorrelatedNormal.condition"]], "torch_mist.distributions.conditional": [[5, "module-torch_mist.distributions.conditional"]], "conditional_categorical() (in module torch_mist.distributions)": [[6, "torch_mist.distributions.conditional_categorical"]], "conditional_mutivariate_categorical() (in module torch_mist.distributions)": [[6, "torch_mist.distributions.conditional_mutivariate_categorical"]], "torch_mist.distributions": [[6, "module-torch_mist.distributions"]], "torch_mist.distributions.parametrizations": [[7, "module-torch_mist.distributions.parametrizations"]], "deltamap (class in torch_mist.distributions.parametrizations.map)": [[8, "torch_mist.distributions.parametrizations.map.DeltaMap"]], "epsilon (in module torch_mist.distributions.parametrizations.map)": [[8, "torch_mist.distributions.parametrizations.map.EPSILON"]], "locscalemap (class in torch_mist.distributions.parametrizations.map)": [[8, "torch_mist.distributions.parametrizations.map.LocScaleMap"]], "logitsmap (class in torch_mist.distributions.parametrizations.map)": [[8, "torch_mist.distributions.parametrizations.map.LogitsMap"]], "parametermap (class in torch_mist.distributions.parametrizations.map)": [[8, "torch_mist.distributions.parametrizations.map.ParameterMap"]], "temperaturelogitsmap (class in torch_mist.distributions.parametrizations.map)": [[8, "torch_mist.distributions.parametrizations.map.TemperatureLogitsMap"]], "__call__() (torch_mist.distributions.parametrizations.map.parametermap method)": [[8, "torch_mist.distributions.parametrizations.map.ParameterMap.__call__"]], "__repr__() (torch_mist.distributions.parametrizations.map.parametermap method)": [[8, "torch_mist.distributions.parametrizations.map.ParameterMap.__repr__"]], "extra_repr() (torch_mist.distributions.parametrizations.map.parametermap method)": [[8, "torch_mist.distributions.parametrizations.map.ParameterMap.extra_repr"]], "map_parameters() (torch_mist.distributions.parametrizations.map.deltamap method)": [[8, "torch_mist.distributions.parametrizations.map.DeltaMap.map_parameters"]], "map_parameters() (torch_mist.distributions.parametrizations.map.locscalemap method)": [[8, "torch_mist.distributions.parametrizations.map.LocScaleMap.map_parameters"]], "map_parameters() (torch_mist.distributions.parametrizations.map.logitsmap method)": [[8, "torch_mist.distributions.parametrizations.map.LogitsMap.map_parameters"]], "map_parameters() (torch_mist.distributions.parametrizations.map.parametermap method)": [[8, "torch_mist.distributions.parametrizations.map.ParameterMap.map_parameters"]], "map_parameters() (torch_mist.distributions.parametrizations.map.temperaturelogitsmap method)": [[8, "torch_mist.distributions.parametrizations.map.TemperatureLogitsMap.map_parameters"]], "n_parameters (torch_mist.distributions.parametrizations.map.deltamap attribute)": [[8, "torch_mist.distributions.parametrizations.map.DeltaMap.n_parameters"]], "n_parameters (torch_mist.distributions.parametrizations.map.logitsmap attribute)": [[8, "torch_mist.distributions.parametrizations.map.LogitsMap.n_parameters"]], "n_parameters (torch_mist.distributions.parametrizations.map.parametermap attribute)": [[8, "torch_mist.distributions.parametrizations.map.ParameterMap.n_parameters"]], "n_parameters (torch_mist.distributions.parametrizations.map.temperaturelogitsmap attribute)": [[8, "torch_mist.distributions.parametrizations.map.TemperatureLogitsMap.n_parameters"]], "supported_distributions (torch_mist.distributions.parametrizations.map.deltamap attribute)": [[8, "torch_mist.distributions.parametrizations.map.DeltaMap.supported_distributions"]], "supported_distributions (torch_mist.distributions.parametrizations.map.locscalemap attribute)": [[8, "torch_mist.distributions.parametrizations.map.LocScaleMap.supported_distributions"]], "supported_distributions (torch_mist.distributions.parametrizations.map.logitsmap attribute)": [[8, "torch_mist.distributions.parametrizations.map.LogitsMap.supported_distributions"]], "supported_distributions (torch_mist.distributions.parametrizations.map.parametermap attribute)": [[8, "torch_mist.distributions.parametrizations.map.ParameterMap.supported_distributions"]], "supported_distributions (torch_mist.distributions.parametrizations.map.temperaturelogitsmap attribute)": [[8, "torch_mist.distributions.parametrizations.map.TemperatureLogitsMap.supported_distributions"]], "torch_mist.distributions.parametrizations.map": [[8, "module-torch_mist.distributions.parametrizations.map"]], "shuffledbatchdistribution (class in torch_mist.distributions.product)": [[9, "torch_mist.distributions.product.ShuffledBatchDistribution"]], "rsample() (torch_mist.distributions.product.shuffledbatchdistribution method)": [[9, "torch_mist.distributions.product.ShuffledBatchDistribution.rsample"]], "sample() (torch_mist.distributions.product.shuffledbatchdistribution method)": [[9, "torch_mist.distributions.product.ShuffledBatchDistribution.sample"]], "torch_mist.distributions.product": [[9, "module-torch_mist.distributions.product"]], "conditionaldistributionmodule (class in torch_mist.distributions.transforms.base)": [[10, "torch_mist.distributions.transforms.base.ConditionalDistributionModule"]], "conditionaltransformeddistributionmodule (class in torch_mist.distributions.transforms.base)": [[10, "torch_mist.distributions.transforms.base.ConditionalTransformedDistributionModule"]], "distributionmodule (class in torch_mist.distributions.transforms.base)": [[10, "torch_mist.distributions.transforms.base.DistributionModule"]], "transformeddistributionmodule (class in torch_mist.distributions.transforms.base)": [[10, "torch_mist.distributions.transforms.base.TransformedDistributionModule"]], "__repr__() (torch_mist.distributions.transforms.base.distributionmodule method)": [[10, "torch_mist.distributions.transforms.base.DistributionModule.__repr__"]], "__repr__() (torch_mist.distributions.transforms.base.transformeddistributionmodule method)": [[10, "torch_mist.distributions.transforms.base.TransformedDistributionModule.__repr__"]], "clear_cache() (torch_mist.distributions.transforms.base.conditionaltransformeddistributionmodule method)": [[10, "torch_mist.distributions.transforms.base.ConditionalTransformedDistributionModule.clear_cache"]], "condition() (torch_mist.distributions.transforms.base.conditionaltransformeddistributionmodule method)": [[10, "torch_mist.distributions.transforms.base.ConditionalTransformedDistributionModule.condition"]], "log_prob() (torch_mist.distributions.transforms.base.transformeddistributionmodule method)": [[10, "torch_mist.distributions.transforms.base.TransformedDistributionModule.log_prob"]], "rsample() (torch_mist.distributions.transforms.base.transformeddistributionmodule method)": [[10, "torch_mist.distributions.transforms.base.TransformedDistributionModule.rsample"]], "torch_mist.distributions.transforms.base": [[10, "module-torch_mist.distributions.transforms.base"]], "conditionaldistributionmodule (class in torch_mist.distributions.transforms)": [[11, "torch_mist.distributions.transforms.ConditionalDistributionModule"]], "conditionallinear (class in torch_mist.distributions.transforms)": [[11, "torch_mist.distributions.transforms.ConditionalLinear"]], "conditionaltransformeddistributionmodule (class in torch_mist.distributions.transforms)": [[11, "torch_mist.distributions.transforms.ConditionalTransformedDistributionModule"]], "distributionmodule (class in torch_mist.distributions.transforms)": [[11, "torch_mist.distributions.transforms.DistributionModule"]], "linear (class in torch_mist.distributions.transforms)": [[11, "torch_mist.distributions.transforms.Linear"]], "permute (class in torch_mist.distributions.transforms)": [[11, "torch_mist.distributions.transforms.Permute"]], "splittransform (class in torch_mist.distributions.transforms)": [[11, "torch_mist.distributions.transforms.SplitTransform"]], "transformeddistributionmodule (class in torch_mist.distributions.transforms)": [[11, "torch_mist.distributions.transforms.TransformedDistributionModule"]], "__repr__() (torch_mist.distributions.transforms.distributionmodule method)": [[11, "torch_mist.distributions.transforms.DistributionModule.__repr__"]], "__repr__() (torch_mist.distributions.transforms.transformeddistributionmodule method)": [[11, "torch_mist.distributions.transforms.TransformedDistributionModule.__repr__"]], "_call() (torch_mist.distributions.transforms.permute method)": [[11, "torch_mist.distributions.transforms.Permute._call"]], "_call() (torch_mist.distributions.transforms.splittransform method)": [[11, "torch_mist.distributions.transforms.SplitTransform._call"]], "_inverse() (torch_mist.distributions.transforms.permute method)": [[11, "torch_mist.distributions.transforms.Permute._inverse"]], "_inverse() (torch_mist.distributions.transforms.splittransform method)": [[11, "torch_mist.distributions.transforms.SplitTransform._inverse"]], "_params() (torch_mist.distributions.transforms.conditionallinear method)": [[11, "torch_mist.distributions.transforms.ConditionalLinear._params"]], "_params() (torch_mist.distributions.transforms.linear method)": [[11, "torch_mist.distributions.transforms.Linear._params"]], "add_dims() (torch_mist.distributions.transforms.splittransform method)": [[11, "torch_mist.distributions.transforms.SplitTransform.add_dims"]], "bijective (torch_mist.distributions.transforms.conditionallinear attribute)": [[11, "torch_mist.distributions.transforms.ConditionalLinear.bijective"]], "bijective (torch_mist.distributions.transforms.linear attribute)": [[11, "torch_mist.distributions.transforms.Linear.bijective"]], "clear_cache() (torch_mist.distributions.transforms.conditionaltransformeddistributionmodule method)": [[11, "torch_mist.distributions.transforms.ConditionalTransformedDistributionModule.clear_cache"]], "codomain (torch_mist.distributions.transforms.conditionallinear attribute)": [[11, "torch_mist.distributions.transforms.ConditionalLinear.codomain"]], "codomain (torch_mist.distributions.transforms.linear attribute)": [[11, "torch_mist.distributions.transforms.Linear.codomain"]], "codomain (torch_mist.distributions.transforms.splittransform attribute)": [[11, "torch_mist.distributions.transforms.SplitTransform.codomain"]], "condition() (torch_mist.distributions.transforms.conditionallinear method)": [[11, "torch_mist.distributions.transforms.ConditionalLinear.condition"]], "condition() (torch_mist.distributions.transforms.conditionaltransformeddistributionmodule method)": [[11, "torch_mist.distributions.transforms.ConditionalTransformedDistributionModule.condition"]], "conditional_linear() (in module torch_mist.distributions.transforms)": [[11, "torch_mist.distributions.transforms.conditional_linear"]], "conditional_skip_linear() (in module torch_mist.distributions.transforms)": [[11, "torch_mist.distributions.transforms.conditional_skip_linear"]], "dist() (torch_mist.distributions.transforms.splittransform method)": [[11, "torch_mist.distributions.transforms.SplitTransform.dist"]], "domain (torch_mist.distributions.transforms.conditionallinear attribute)": [[11, "torch_mist.distributions.transforms.ConditionalLinear.domain"]], "domain (torch_mist.distributions.transforms.linear attribute)": [[11, "torch_mist.distributions.transforms.Linear.domain"]], "domain (torch_mist.distributions.transforms.splittransform attribute)": [[11, "torch_mist.distributions.transforms.SplitTransform.domain"]], "linear() (in module torch_mist.distributions.transforms)": [[11, "torch_mist.distributions.transforms.linear"]], "log_abs_det_jacobian() (torch_mist.distributions.transforms.permute method)": [[11, "torch_mist.distributions.transforms.Permute.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torch_mist.distributions.transforms.splittransform method)": [[11, "torch_mist.distributions.transforms.SplitTransform.log_abs_det_jacobian"]], "log_prob() (torch_mist.distributions.transforms.transformeddistributionmodule method)": [[11, "torch_mist.distributions.transforms.TransformedDistributionModule.log_prob"]], "permute() (in module torch_mist.distributions.transforms)": [[11, "torch_mist.distributions.transforms.permute"]], "remove_dims() (torch_mist.distributions.transforms.splittransform method)": [[11, "torch_mist.distributions.transforms.SplitTransform.remove_dims"]], "rsample() (torch_mist.distributions.transforms.transformeddistributionmodule method)": [[11, "torch_mist.distributions.transforms.TransformedDistributionModule.rsample"]], "sign (torch_mist.distributions.transforms.linear attribute)": [[11, "torch_mist.distributions.transforms.Linear.sign"]], "torch_mist.distributions.transforms": [[11, "module-torch_mist.distributions.transforms"]], "update_device() (torch_mist.distributions.transforms.permute method)": [[11, "torch_mist.distributions.transforms.Permute.update_device"]], "conditionallinear (class in torch_mist.distributions.transforms.linear)": [[12, "torch_mist.distributions.transforms.linear.ConditionalLinear"]], "conditionedlinear (class in torch_mist.distributions.transforms.linear)": [[12, "torch_mist.distributions.transforms.linear.ConditionedLinear"]], "linear (class in torch_mist.distributions.transforms.linear)": [[12, "torch_mist.distributions.transforms.linear.Linear"]], "_call() (torch_mist.distributions.transforms.linear.conditionedlinear method)": [[12, "torch_mist.distributions.transforms.linear.ConditionedLinear._call"]], "_inverse() (torch_mist.distributions.transforms.linear.conditionedlinear method)": [[12, "torch_mist.distributions.transforms.linear.ConditionedLinear._inverse"]], "_params() (torch_mist.distributions.transforms.linear.conditionallinear method)": [[12, "torch_mist.distributions.transforms.linear.ConditionalLinear._params"]], "_params() (torch_mist.distributions.transforms.linear.linear method)": [[12, "torch_mist.distributions.transforms.linear.Linear._params"]], "bijective (torch_mist.distributions.transforms.linear.conditionallinear attribute)": [[12, "torch_mist.distributions.transforms.linear.ConditionalLinear.bijective"]], "bijective (torch_mist.distributions.transforms.linear.conditionedlinear attribute)": [[12, "id2"], [12, "torch_mist.distributions.transforms.linear.ConditionedLinear.bijective"]], "bijective (torch_mist.distributions.transforms.linear.linear attribute)": [[12, "torch_mist.distributions.transforms.linear.Linear.bijective"]], "codomain (torch_mist.distributions.transforms.linear.conditionallinear attribute)": [[12, "torch_mist.distributions.transforms.linear.ConditionalLinear.codomain"]], "codomain (torch_mist.distributions.transforms.linear.conditionedlinear attribute)": [[12, "id1"], [12, "torch_mist.distributions.transforms.linear.ConditionedLinear.codomain"]], "codomain (torch_mist.distributions.transforms.linear.linear attribute)": [[12, "torch_mist.distributions.transforms.linear.Linear.codomain"]], "condition() (torch_mist.distributions.transforms.linear.conditionallinear method)": [[12, "torch_mist.distributions.transforms.linear.ConditionalLinear.condition"]], "conditional_linear() (in module torch_mist.distributions.transforms.linear)": [[12, "torch_mist.distributions.transforms.linear.conditional_linear"]], "conditional_skip_linear() (in module torch_mist.distributions.transforms.linear)": [[12, "torch_mist.distributions.transforms.linear.conditional_skip_linear"]], "domain (torch_mist.distributions.transforms.linear.conditionallinear attribute)": [[12, "torch_mist.distributions.transforms.linear.ConditionalLinear.domain"]], "domain (torch_mist.distributions.transforms.linear.conditionedlinear attribute)": [[12, "id0"], [12, "torch_mist.distributions.transforms.linear.ConditionedLinear.domain"]], "domain (torch_mist.distributions.transforms.linear.linear attribute)": [[12, "torch_mist.distributions.transforms.linear.Linear.domain"]], "linear() (in module torch_mist.distributions.transforms.linear)": [[12, "torch_mist.distributions.transforms.linear.linear"]], "log_abs_det_jacobian() (torch_mist.distributions.transforms.linear.conditionedlinear method)": [[12, "torch_mist.distributions.transforms.linear.ConditionedLinear.log_abs_det_jacobian"]], "sign (torch_mist.distributions.transforms.linear.conditionedlinear attribute)": [[12, "torch_mist.distributions.transforms.linear.ConditionedLinear.sign"]], "sign (torch_mist.distributions.transforms.linear.linear attribute)": [[12, "torch_mist.distributions.transforms.linear.Linear.sign"]], "torch_mist.distributions.transforms.linear": [[12, "module-torch_mist.distributions.transforms.linear"]], "permute (class in torch_mist.distributions.transforms.permute)": [[13, "torch_mist.distributions.transforms.permute.Permute"]], "_call() (torch_mist.distributions.transforms.permute.permute method)": [[13, "torch_mist.distributions.transforms.permute.Permute._call"]], "_inverse() (torch_mist.distributions.transforms.permute.permute method)": [[13, "torch_mist.distributions.transforms.permute.Permute._inverse"]], "log_abs_det_jacobian() (torch_mist.distributions.transforms.permute.permute method)": [[13, "torch_mist.distributions.transforms.permute.Permute.log_abs_det_jacobian"]], "permute() (in module torch_mist.distributions.transforms.permute)": [[13, "torch_mist.distributions.transforms.permute.permute"]], "torch_mist.distributions.transforms.permute": [[13, "module-torch_mist.distributions.transforms.permute"]], "update_device() (torch_mist.distributions.transforms.permute.permute method)": [[13, "torch_mist.distributions.transforms.permute.Permute.update_device"]], "splittransform (class in torch_mist.distributions.transforms.split)": [[14, "torch_mist.distributions.transforms.split.SplitTransform"]], "_call() (torch_mist.distributions.transforms.split.splittransform method)": [[14, "torch_mist.distributions.transforms.split.SplitTransform._call"]], "_inverse() (torch_mist.distributions.transforms.split.splittransform method)": [[14, "torch_mist.distributions.transforms.split.SplitTransform._inverse"]], "add_dims() (torch_mist.distributions.transforms.split.splittransform method)": [[14, "torch_mist.distributions.transforms.split.SplitTransform.add_dims"]], "codomain (torch_mist.distributions.transforms.split.splittransform attribute)": [[14, "torch_mist.distributions.transforms.split.SplitTransform.codomain"]], "dist() (torch_mist.distributions.transforms.split.splittransform method)": [[14, "torch_mist.distributions.transforms.split.SplitTransform.dist"]], "domain (torch_mist.distributions.transforms.split.splittransform attribute)": [[14, "torch_mist.distributions.transforms.split.SplitTransform.domain"]], "log_abs_det_jacobian() (torch_mist.distributions.transforms.split.splittransform method)": [[14, "torch_mist.distributions.transforms.split.SplitTransform.log_abs_det_jacobian"]], "remove_dims() (torch_mist.distributions.transforms.split.splittransform method)": [[14, "torch_mist.distributions.transforms.split.SplitTransform.remove_dims"]], "torch_mist.distributions.transforms.split": [[14, "module-torch_mist.distributions.transforms.split"]], "conditional_categorical() (in module torch_mist.distributions.utils)": [[15, "torch_mist.distributions.utils.conditional_categorical"]], "conditional_mutivariate_categorical() (in module torch_mist.distributions.utils)": [[15, "torch_mist.distributions.utils.conditional_mutivariate_categorical"]], "torch_mist.distributions.utils": [[15, "module-torch_mist.distributions.utils"]], "estimation (class in torch_mist.estimators.base)": [[16, "torch_mist.estimators.base.Estimation"]], "logratioestimator (class in torch_mist.estimators.base)": [[16, "torch_mist.estimators.base.LogRatioEstimator"]], "mutualinformationestimator (class in torch_mist.estimators.base)": [[16, "torch_mist.estimators.base.MutualInformationEstimator"]], "__add__() (torch_mist.estimators.base.estimation method)": [[16, "torch_mist.estimators.base.Estimation.__add__"]], "__sub__() (torch_mist.estimators.base.estimation method)": [[16, "torch_mist.estimators.base.Estimation.__sub__"]], "apply() (torch_mist.estimators.base.estimation method)": [[16, "torch_mist.estimators.base.Estimation.apply"]], "forward() (torch_mist.estimators.base.logratioestimator method)": [[16, "torch_mist.estimators.base.LogRatioEstimator.forward"]], "forward() (torch_mist.estimators.base.mutualinformationestimator method)": [[16, "torch_mist.estimators.base.MutualInformationEstimator.forward"]], "log_ratio() (torch_mist.estimators.base.logratioestimator method)": [[16, "torch_mist.estimators.base.LogRatioEstimator.log_ratio"]], "loss (torch_mist.estimators.base.estimation attribute)": [[16, "torch_mist.estimators.base.Estimation.loss"]], "lower_bound (torch_mist.estimators.base.mutualinformationestimator attribute)": [[16, "torch_mist.estimators.base.MutualInformationEstimator.lower_bound"]], "shape (torch_mist.estimators.base.estimation property)": [[16, "torch_mist.estimators.base.Estimation.shape"]], "torch_mist.estimators.base": [[16, "module-torch_mist.estimators.base"]], "upper_bound (torch_mist.estimators.base.mutualinformationestimator attribute)": [[16, "torch_mist.estimators.base.MutualInformationEstimator.upper_bound"]], "value (torch_mist.estimators.base.estimation attribute)": [[16, "torch_mist.estimators.base.Estimation.value"]], "alphatuba (class in torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.AlphaTUBA"]], "discriminativemutualinformationestimator (class in torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.DiscriminativeMutualInformationEstimator"]], "flo (class in torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.FLO"]], "infonce (class in torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.InfoNCE"]], "js (class in torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.JS"]], "mine (class in torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.MINE"]], "nwj (class in torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.NWJ"]], "smile (class in torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.SMILE"]], "tuba (class in torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.TUBA"]], "__repr__() (torch_mist.estimators.discriminative.discriminativemutualinformationestimator method)": [[17, "torch_mist.estimators.discriminative.DiscriminativeMutualInformationEstimator.__repr__"]], "_compute_log_ratio() (torch_mist.estimators.discriminative.discriminativemutualinformationestimator method)": [[17, "torch_mist.estimators.discriminative.DiscriminativeMutualInformationEstimator._compute_log_ratio"]], "_compute_log_ratio() (torch_mist.estimators.discriminative.flo method)": [[17, "torch_mist.estimators.discriminative.FLO._compute_log_ratio"]], "_compute_log_ratio() (torch_mist.estimators.discriminative.infonce method)": [[17, "torch_mist.estimators.discriminative.InfoNCE._compute_log_ratio"]], "_compute_log_ratio() (torch_mist.estimators.discriminative.nwj method)": [[17, "torch_mist.estimators.discriminative.NWJ._compute_log_ratio"]], "_compute_log_ratio() (torch_mist.estimators.discriminative.smile method)": [[17, "torch_mist.estimators.discriminative.SMILE._compute_log_ratio"]], "_compute_log_ratio() (torch_mist.estimators.discriminative.tuba method)": [[17, "torch_mist.estimators.discriminative.TUBA._compute_log_ratio"]], "_compute_log_ratio_grad() (torch_mist.estimators.discriminative.discriminativemutualinformationestimator method)": [[17, "torch_mist.estimators.discriminative.DiscriminativeMutualInformationEstimator._compute_log_ratio_grad"]], "_compute_log_ratio_grad() (torch_mist.estimators.discriminative.js method)": [[17, "torch_mist.estimators.discriminative.JS._compute_log_ratio_grad"]], "_compute_log_ratio_grad() (torch_mist.estimators.discriminative.smile method)": [[17, "torch_mist.estimators.discriminative.SMILE._compute_log_ratio_grad"]], "_compute_log_ratio_grad() (torch_mist.estimators.discriminative.tuba method)": [[17, "torch_mist.estimators.discriminative.TUBA._compute_log_ratio_grad"]], "alpha_tuba() (in module torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.alpha_tuba"]], "flo() (in module torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.flo"]], "infonce() (in module torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.infonce"]], "js() (in module torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.js"]], "log_ratio() (torch_mist.estimators.discriminative.discriminativemutualinformationestimator method)": [[17, "torch_mist.estimators.discriminative.DiscriminativeMutualInformationEstimator.log_ratio"]], "lower_bound (torch_mist.estimators.discriminative.discriminativemutualinformationestimator attribute)": [[17, "torch_mist.estimators.discriminative.DiscriminativeMutualInformationEstimator.lower_bound"]], "mine() (in module torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.mine"]], "nwj() (in module torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.nwj"]], "sample_proposal() (torch_mist.estimators.discriminative.discriminativemutualinformationestimator method)": [[17, "torch_mist.estimators.discriminative.DiscriminativeMutualInformationEstimator.sample_proposal"]], "smile() (in module torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.smile"]], "torch_mist.estimators.discriminative": [[17, "module-torch_mist.estimators.discriminative"]], "tuba() (in module torch_mist.estimators.discriminative)": [[17, "torch_mist.estimators.discriminative.tuba"]], "upper_bound (torch_mist.estimators.discriminative.discriminativemutualinformationestimator attribute)": [[17, "torch_mist.estimators.discriminative.DiscriminativeMutualInformationEstimator.upper_bound"]], "ba (class in torch_mist.estimators.generative)": [[18, "torch_mist.estimators.generative.BA"]], "club (class in torch_mist.estimators.generative)": [[18, "torch_mist.estimators.generative.CLUB"]], "doe (class in torch_mist.estimators.generative)": [[18, "torch_mist.estimators.generative.DoE"]], "gm (class in torch_mist.estimators.generative)": [[18, "torch_mist.estimators.generative.GM"]], "generativemutualinformationestimator (class in torch_mist.estimators.generative)": [[18, "torch_mist.estimators.generative.GenerativeMutualInformationEstimator"]], "l1out (class in torch_mist.estimators.generative)": [[18, "torch_mist.estimators.generative.L1Out"]], "pq (class in torch_mist.estimators.generative)": [[18, "torch_mist.estimators.generative.PQ"]], "variationalproposalmutualinformationestimator (class in torch_mist.estimators.generative)": [[18, "torch_mist.estimators.generative.VariationalProposalMutualInformationEstimator"]], "__repr__() (torch_mist.estimators.generative.doe method)": [[18, "torch_mist.estimators.generative.DoE.__repr__"]], "__repr__() (torch_mist.estimators.generative.gm method)": [[18, "torch_mist.estimators.generative.GM.__repr__"]], "__repr__() (torch_mist.estimators.generative.pq method)": [[18, "torch_mist.estimators.generative.PQ.__repr__"]], "__repr__() (torch_mist.estimators.generative.variationalproposalmutualinformationestimator method)": [[18, "torch_mist.estimators.generative.VariationalProposalMutualInformationEstimator.__repr__"]], "compute_loss() (torch_mist.estimators.generative.ba method)": [[18, "torch_mist.estimators.generative.BA.compute_loss"]], "compute_loss() (torch_mist.estimators.generative.gm method)": [[18, "torch_mist.estimators.generative.GM.compute_loss"]], "compute_loss() (torch_mist.estimators.generative.generativemutualinformationestimator method)": [[18, "torch_mist.estimators.generative.GenerativeMutualInformationEstimator.compute_loss"]], "compute_loss() (torch_mist.estimators.generative.variationalproposalmutualinformationestimator method)": [[18, "torch_mist.estimators.generative.VariationalProposalMutualInformationEstimator.compute_loss"]], "expected_log_ratio() (torch_mist.estimators.generative.pq method)": [[18, "torch_mist.estimators.generative.PQ.expected_log_ratio"]], "log_prob_x() (torch_mist.estimators.generative.gm method)": [[18, "torch_mist.estimators.generative.GM.log_prob_x"]], "log_prob_y() (torch_mist.estimators.generative.ba method)": [[18, "torch_mist.estimators.generative.BA.log_prob_y"]], "log_prob_y() (torch_mist.estimators.generative.club method)": [[18, "torch_mist.estimators.generative.CLUB.log_prob_y"]], "log_prob_y() (torch_mist.estimators.generative.gm method)": [[18, "torch_mist.estimators.generative.GM.log_prob_y"]], "log_prob_y() (torch_mist.estimators.generative.generativemutualinformationestimator method)": [[18, "torch_mist.estimators.generative.GenerativeMutualInformationEstimator.log_prob_y"]], "log_prob_y() (torch_mist.estimators.generative.l1out method)": [[18, "torch_mist.estimators.generative.L1Out.log_prob_y"]], "log_prob_y() (torch_mist.estimators.generative.pq method)": [[18, "torch_mist.estimators.generative.PQ.log_prob_y"]], "log_prob_y_x() (torch_mist.estimators.generative.gm method)": [[18, "torch_mist.estimators.generative.GM.log_prob_y_x"]], "log_prob_y_x() (torch_mist.estimators.generative.generativemutualinformationestimator method)": [[18, "torch_mist.estimators.generative.GenerativeMutualInformationEstimator.log_prob_y_x"]], "log_prob_y_x() (torch_mist.estimators.generative.variationalproposalmutualinformationestimator method)": [[18, "torch_mist.estimators.generative.VariationalProposalMutualInformationEstimator.log_prob_y_x"]], "log_ratio() (torch_mist.estimators.generative.generativemutualinformationestimator method)": [[18, "torch_mist.estimators.generative.GenerativeMutualInformationEstimator.log_ratio"]], "torch_mist.estimators.generative": [[18, "module-torch_mist.estimators.generative"]], "hybridmutualinformationestimator (class in torch_mist.estimators.hybrid)": [[19, "torch_mist.estimators.hybrid.HybridMutualInformationEstimator"]], "log_ratio() (torch_mist.estimators.hybrid.hybridmutualinformationestimator method)": [[19, "torch_mist.estimators.hybrid.HybridMutualInformationEstimator.log_ratio"]], "torch_mist.estimators.hybrid": [[19, "module-torch_mist.estimators.hybrid"]], "alphatuba (class in torch_mist.estimators)": [[20, "torch_mist.estimators.AlphaTUBA"]], "ba (class in torch_mist.estimators)": [[20, "torch_mist.estimators.BA"]], "doe (class in torch_mist.estimators)": [[20, "torch_mist.estimators.DoE"]], "flo (class in torch_mist.estimators)": [[20, "torch_mist.estimators.FLO"]], "gm (class in torch_mist.estimators)": [[20, "torch_mist.estimators.GM"]], "hybridmutualinformationestimator (class in torch_mist.estimators)": [[20, "torch_mist.estimators.HybridMutualInformationEstimator"]], "infonce (class in torch_mist.estimators)": [[20, "torch_mist.estimators.InfoNCE"]], "js (class in torch_mist.estimators)": [[20, "torch_mist.estimators.JS"]], "mine (class in torch_mist.estimators)": [[20, "torch_mist.estimators.MINE"]], "mutualinformationestimator (class in torch_mist.estimators)": [[20, "torch_mist.estimators.MutualInformationEstimator"]], "nwj (class in torch_mist.estimators)": [[20, "torch_mist.estimators.NWJ"]], "smile (class in torch_mist.estimators)": [[20, "torch_mist.estimators.SMILE"]], "tuba (class in torch_mist.estimators)": [[20, "torch_mist.estimators.TUBA"]], "__repr__() (torch_mist.estimators.doe method)": [[20, "torch_mist.estimators.DoE.__repr__"]], "__repr__() (torch_mist.estimators.gm method)": [[20, "torch_mist.estimators.GM.__repr__"]], "_compute_log_ratio() (torch_mist.estimators.flo method)": [[20, "torch_mist.estimators.FLO._compute_log_ratio"]], "_compute_log_ratio() (torch_mist.estimators.infonce method)": [[20, "torch_mist.estimators.InfoNCE._compute_log_ratio"]], "_compute_log_ratio() (torch_mist.estimators.nwj method)": [[20, "torch_mist.estimators.NWJ._compute_log_ratio"]], "_compute_log_ratio() (torch_mist.estimators.smile method)": [[20, "torch_mist.estimators.SMILE._compute_log_ratio"]], "_compute_log_ratio() (torch_mist.estimators.tuba method)": [[20, "torch_mist.estimators.TUBA._compute_log_ratio"]], "_compute_log_ratio_grad() (torch_mist.estimators.js method)": [[20, "torch_mist.estimators.JS._compute_log_ratio_grad"]], "_compute_log_ratio_grad() (torch_mist.estimators.smile method)": [[20, "torch_mist.estimators.SMILE._compute_log_ratio_grad"]], "_compute_log_ratio_grad() (torch_mist.estimators.tuba method)": [[20, "torch_mist.estimators.TUBA._compute_log_ratio_grad"]], "alpha_tuba() (in module torch_mist.estimators)": [[20, "torch_mist.estimators.alpha_tuba"]], "compute_loss() (torch_mist.estimators.ba method)": [[20, "torch_mist.estimators.BA.compute_loss"]], "compute_loss() (torch_mist.estimators.gm method)": [[20, "torch_mist.estimators.GM.compute_loss"]], "flo() (in module torch_mist.estimators)": [[20, "torch_mist.estimators.flo"]], "forward() (torch_mist.estimators.mutualinformationestimator method)": [[20, "torch_mist.estimators.MutualInformationEstimator.forward"]], "infonce() (in module torch_mist.estimators)": [[20, "torch_mist.estimators.infonce"]], "js() (in module torch_mist.estimators)": [[20, "torch_mist.estimators.js"]], "log_prob_x() (torch_mist.estimators.gm method)": [[20, "torch_mist.estimators.GM.log_prob_x"]], "log_prob_y() (torch_mist.estimators.ba method)": [[20, "torch_mist.estimators.BA.log_prob_y"]], "log_prob_y() (torch_mist.estimators.gm method)": [[20, "torch_mist.estimators.GM.log_prob_y"]], "log_prob_y_x() (torch_mist.estimators.gm method)": [[20, "torch_mist.estimators.GM.log_prob_y_x"]], "log_ratio() (torch_mist.estimators.hybridmutualinformationestimator method)": [[20, "torch_mist.estimators.HybridMutualInformationEstimator.log_ratio"]], "lower_bound (torch_mist.estimators.mutualinformationestimator attribute)": [[20, "torch_mist.estimators.MutualInformationEstimator.lower_bound"]], "mine() (in module torch_mist.estimators)": [[20, "torch_mist.estimators.mine"]], "nwj() (in module torch_mist.estimators)": [[20, "torch_mist.estimators.nwj"]], "smile() (in module torch_mist.estimators)": [[20, "torch_mist.estimators.smile"]], "torch_mist.estimators": [[20, "module-torch_mist.estimators"]], "tuba() (in module torch_mist.estimators)": [[20, "torch_mist.estimators.tuba"]], "upper_bound (torch_mist.estimators.mutualinformationestimator attribute)": [[20, "torch_mist.estimators.MutualInformationEstimator.upper_bound"]], "__version__ (in module torch_mist)": [[21, "torch_mist.__version__"]], "torch_mist": [[21, "module-torch_mist"]], "encoderkeywords (class in torch_mist.models.encoder)": [[22, "torch_mist.models.encoder.EncoderKeywords"]], "encodermlp (class in torch_mist.models.encoder)": [[22, "torch_mist.models.encoder.EncoderMLP"]], "slowlyupdatingmodel (class in torch_mist.models.encoder)": [[22, "torch_mist.models.encoder.SlowlyUpdatingModel"]], "_update_weights() (torch_mist.models.encoder.slowlyupdatingmodel method)": [[22, "torch_mist.models.encoder.SlowlyUpdatingModel._update_weights"]], "current_model (torch_mist.models.encoder.slowlyupdatingmodel property)": [[22, "torch_mist.models.encoder.SlowlyUpdatingModel.current_model"]], "forward() (torch_mist.models.encoder.slowlyupdatingmodel method)": [[22, "torch_mist.models.encoder.SlowlyUpdatingModel.forward"]], "same (torch_mist.models.encoder.encoderkeywords attribute)": [[22, "torch_mist.models.encoder.EncoderKeywords.same"]], "slow (torch_mist.models.encoder.encoderkeywords attribute)": [[22, "torch_mist.models.encoder.EncoderKeywords.slow"]], "torch_mist.models.encoder": [[22, "module-torch_mist.models.encoder"]], "encodermlp (class in torch_mist.models.encoder.mlp)": [[23, "torch_mist.models.encoder.mlp.EncoderMLP"]], "torch_mist.models.encoder.mlp": [[23, "module-torch_mist.models.encoder.mlp"]], "slowlyupdatingmodel (class in torch_mist.models.encoder.slow_updates)": [[24, "torch_mist.models.encoder.slow_updates.SlowlyUpdatingModel"]], "_update_weights() (torch_mist.models.encoder.slow_updates.slowlyupdatingmodel method)": [[24, "torch_mist.models.encoder.slow_updates.SlowlyUpdatingModel._update_weights"]], "current_model (torch_mist.models.encoder.slow_updates.slowlyupdatingmodel property)": [[24, "torch_mist.models.encoder.slow_updates.SlowlyUpdatingModel.current_model"]], "forward() (torch_mist.models.encoder.slow_updates.slowlyupdatingmodel method)": [[24, "torch_mist.models.encoder.slow_updates.SlowlyUpdatingModel.forward"]], "torch_mist.models.encoder.slow_updates": [[24, "module-torch_mist.models.encoder.slow_updates"]], "encoderkeywords (class in torch_mist.models.encoder.types)": [[25, "torch_mist.models.encoder.types.EncoderKeywords"]], "same (torch_mist.models.encoder.types.encoderkeywords attribute)": [[25, "torch_mist.models.encoder.types.EncoderKeywords.same"]], "slow (torch_mist.models.encoder.types.encoderkeywords attribute)": [[25, "torch_mist.models.encoder.types.EncoderKeywords.slow"]], "torch_mist.models.encoder.types": [[25, "module-torch_mist.models.encoder.types"]], "torch_mist.models": [[26, "module-torch_mist.models"]], "conditionalcategoricallinear (class in torch_mist.models.learnable_distributions.categorical)": [[27, "torch_mist.models.learnable_distributions.categorical.ConditionalCategoricalLinear"]], "conditionalcategoricalmlp (class in torch_mist.models.learnable_distributions.categorical)": [[27, "torch_mist.models.learnable_distributions.categorical.ConditionalCategoricalMLP"]], "learnablecategorical (class in torch_mist.models.learnable_distributions.categorical)": [[27, "torch_mist.models.learnable_distributions.categorical.LearnableCategorical"]], "__repr__() (torch_mist.models.learnable_distributions.categorical.learnablecategorical method)": [[27, "torch_mist.models.learnable_distributions.categorical.LearnableCategorical.__repr__"]], "condition() (torch_mist.models.learnable_distributions.categorical.conditionalcategoricallinear method)": [[27, "torch_mist.models.learnable_distributions.categorical.ConditionalCategoricalLinear.condition"]], "log_prob() (torch_mist.models.learnable_distributions.categorical.learnablecategorical method)": [[27, "torch_mist.models.learnable_distributions.categorical.LearnableCategorical.log_prob"]], "rsample() (torch_mist.models.learnable_distributions.categorical.learnablecategorical method)": [[27, "torch_mist.models.learnable_distributions.categorical.LearnableCategorical.rsample"]], "sample() (torch_mist.models.learnable_distributions.categorical.learnablecategorical method)": [[27, "torch_mist.models.learnable_distributions.categorical.LearnableCategorical.sample"]], "torch_mist.models.learnable_distributions.categorical": [[27, "module-torch_mist.models.learnable_distributions.categorical"]], "conditionalcategoricallinear (class in torch_mist.models.learnable_distributions)": [[28, "torch_mist.models.learnable_distributions.ConditionalCategoricalLinear"]], "conditionalcategoricalmlp (class in torch_mist.models.learnable_distributions)": [[28, "torch_mist.models.learnable_distributions.ConditionalCategoricalMLP"]], "conditionalflowtransformednormal (class in torch_mist.models.learnable_distributions)": [[28, "torch_mist.models.learnable_distributions.ConditionalFlowTransformedNormal"]], "flowtransformedjointnormal (class in torch_mist.models.learnable_distributions)": [[28, "torch_mist.models.learnable_distributions.FlowTransformedJointNormal"]], "flowtransformednormal (class in torch_mist.models.learnable_distributions)": [[28, "torch_mist.models.learnable_distributions.FlowTransformedNormal"]], "learnablecategorical (class in torch_mist.models.learnable_distributions)": [[28, "torch_mist.models.learnable_distributions.LearnableCategorical"]], "__repr__() (torch_mist.models.learnable_distributions.learnablecategorical method)": [[28, "torch_mist.models.learnable_distributions.LearnableCategorical.__repr__"]], "condition() (torch_mist.models.learnable_distributions.conditionalcategoricallinear method)": [[28, "torch_mist.models.learnable_distributions.ConditionalCategoricalLinear.condition"]], "dist (torch_mist.models.learnable_distributions.flowtransformedjointnormal property)": [[28, "torch_mist.models.learnable_distributions.FlowTransformedJointNormal.dist"]], "dist (torch_mist.models.learnable_distributions.flowtransformednormal property)": [[28, "torch_mist.models.learnable_distributions.FlowTransformedNormal.dist"]], "labels (torch_mist.models.learnable_distributions.flowtransformedjointnormal attribute)": [[28, "torch_mist.models.learnable_distributions.FlowTransformedJointNormal.labels"]], "log_prob() (torch_mist.models.learnable_distributions.flowtransformedjointnormal method)": [[28, "torch_mist.models.learnable_distributions.FlowTransformedJointNormal.log_prob"]], "log_prob() (torch_mist.models.learnable_distributions.flowtransformednormal method)": [[28, "torch_mist.models.learnable_distributions.FlowTransformedNormal.log_prob"]], "log_prob() (torch_mist.models.learnable_distributions.learnablecategorical method)": [[28, "torch_mist.models.learnable_distributions.LearnableCategorical.log_prob"]], "rsample() (torch_mist.models.learnable_distributions.flowtransformedjointnormal method)": [[28, "torch_mist.models.learnable_distributions.FlowTransformedJointNormal.rsample"]], "rsample() (torch_mist.models.learnable_distributions.flowtransformednormal method)": [[28, "torch_mist.models.learnable_distributions.FlowTransformedNormal.rsample"]], "rsample() (torch_mist.models.learnable_distributions.learnablecategorical method)": [[28, "torch_mist.models.learnable_distributions.LearnableCategorical.rsample"]], "sample() (torch_mist.models.learnable_distributions.flowtransformedjointnormal method)": [[28, "torch_mist.models.learnable_distributions.FlowTransformedJointNormal.sample"]], "sample() (torch_mist.models.learnable_distributions.flowtransformednormal method)": [[28, "torch_mist.models.learnable_distributions.FlowTransformedNormal.sample"]], "sample() (torch_mist.models.learnable_distributions.learnablecategorical method)": [[28, "torch_mist.models.learnable_distributions.LearnableCategorical.sample"]], "torch_mist.models.learnable_distributions": [[28, "module-torch_mist.models.learnable_distributions"]], "conditionalflowtransformednormal (class in torch_mist.models.learnable_distributions.transformed_normal)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.ConditionalFlowTransformedNormal"]], "flowtransformedjointnormal (class in torch_mist.models.learnable_distributions.transformed_normal)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedJointNormal"]], "flowtransformednormal (class in torch_mist.models.learnable_distributions.transformed_normal)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedNormal"]], "dist (torch_mist.models.learnable_distributions.transformed_normal.flowtransformedjointnormal property)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedJointNormal.dist"]], "dist (torch_mist.models.learnable_distributions.transformed_normal.flowtransformednormal property)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedNormal.dist"]], "fetch_transform() (in module torch_mist.models.learnable_distributions.transformed_normal)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.fetch_transform"]], "labels (torch_mist.models.learnable_distributions.transformed_normal.flowtransformedjointnormal attribute)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedJointNormal.labels"]], "log_prob() (torch_mist.models.learnable_distributions.transformed_normal.flowtransformedjointnormal method)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedJointNormal.log_prob"]], "log_prob() (torch_mist.models.learnable_distributions.transformed_normal.flowtransformednormal method)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedNormal.log_prob"]], "rsample() (torch_mist.models.learnable_distributions.transformed_normal.flowtransformedjointnormal method)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedJointNormal.rsample"]], "rsample() (torch_mist.models.learnable_distributions.transformed_normal.flowtransformednormal method)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedNormal.rsample"]], "sample() (torch_mist.models.learnable_distributions.transformed_normal.flowtransformedjointnormal method)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedJointNormal.sample"]], "sample() (torch_mist.models.learnable_distributions.transformed_normal.flowtransformednormal method)": [[29, "torch_mist.models.learnable_distributions.transformed_normal.FlowTransformedNormal.sample"]], "torch_mist.models.learnable_distributions.transformed_normal": [[29, "module-torch_mist.models.learnable_distributions.transformed_normal"]], "jointdensenn (class in torch_mist.nn)": [[30, "torch_mist.nn.JointDenseNN"]], "forward() (torch_mist.nn.jointdensenn method)": [[30, "torch_mist.nn.JointDenseNN.forward"]], "torch_mist.nn": [[30, "module-torch_mist.nn"]], "constant (class in torch_mist.nn.utils)": [[31, "torch_mist.nn.utils.Constant"]], "identity (class in torch_mist.nn.utils)": [[31, "torch_mist.nn.utils.Identity"]], "jointdensenn (class in torch_mist.nn.utils)": [[31, "torch_mist.nn.utils.JointDenseNN"]], "mergeoutputs (class in torch_mist.nn.utils)": [[31, "torch_mist.nn.utils.MergeOutputs"]], "skipdensenn (class in torch_mist.nn.utils)": [[31, "torch_mist.nn.utils.SkipDenseNN"]], "__repr__() (torch_mist.nn.utils.constant method)": [[31, "torch_mist.nn.utils.Constant.__repr__"]], "forward() (torch_mist.nn.utils.constant method)": [[31, "torch_mist.nn.utils.Constant.forward"]], "forward() (torch_mist.nn.utils.identity method)": [[31, "torch_mist.nn.utils.Identity.forward"]], "forward() (torch_mist.nn.utils.jointdensenn method)": [[31, "torch_mist.nn.utils.JointDenseNN.forward"]], "forward() (torch_mist.nn.utils.mergeoutputs method)": [[31, "torch_mist.nn.utils.MergeOutputs.forward"]], "forward() (torch_mist.nn.utils.skipdensenn method)": [[31, "torch_mist.nn.utils.SkipDenseNN.forward"]], "torch_mist.nn.utils": [[31, "module-torch_mist.nn.utils"]], "quantizationfunction (class in torch_mist.quantization)": [[32, "torch_mist.quantization.QuantizationFunction"]], "forward() (torch_mist.quantization.quantizationfunction method)": [[32, "torch_mist.quantization.QuantizationFunction.forward"]], "num_bins (torch_mist.quantization.quantizationfunction property)": [[32, "torch_mist.quantization.QuantizationFunction.num_bins"]], "torch_mist.quantization": [[32, "module-torch_mist.quantization"]], "unnormalizedratioestimator (class in torch_mist.ratio.base)": [[33, "torch_mist.ratio.base.UnnormalizedRatioEstimator"]], "forward() (torch_mist.ratio.base.unnormalizedratioestimator method)": [[33, "torch_mist.ratio.base.UnnormalizedRatioEstimator.forward"]], "torch_mist.ratio.base": [[33, "module-torch_mist.ratio.base"]], "conditionaldistributionratio (class in torch_mist.ratio.conditional_dist)": [[34, "torch_mist.ratio.conditional_dist.ConditionalDistributionRatio"]], "forward() (torch_mist.ratio.conditional_dist.conditionaldistributionratio method)": [[34, "torch_mist.ratio.conditional_dist.ConditionalDistributionRatio.forward"]], "torch_mist.ratio.conditional_dist": [[34, "module-torch_mist.ratio.conditional_dist"]], "jointunnormalizedratioestimator (class in torch_mist.ratio)": [[35, "torch_mist.ratio.JointUnnormalizedRatioEstimator"]], "separableunnormalizedratioestimator (class in torch_mist.ratio)": [[35, "torch_mist.ratio.SeparableUnnormalizedRatioEstimator"]], "unnormalizedratioestimator (class in torch_mist.ratio)": [[35, "torch_mist.ratio.UnnormalizedRatioEstimator"]], "forward() (torch_mist.ratio.jointunnormalizedratioestimator method)": [[35, "torch_mist.ratio.JointUnnormalizedRatioEstimator.forward"]], "forward() (torch_mist.ratio.separableunnormalizedratioestimator method)": [[35, "torch_mist.ratio.SeparableUnnormalizedRatioEstimator.forward"]], "forward() (torch_mist.ratio.unnormalizedratioestimator method)": [[35, "torch_mist.ratio.UnnormalizedRatioEstimator.forward"]], "joint_unnormalized_log_ratio() (in module torch_mist.ratio)": [[35, "torch_mist.ratio.joint_unnormalized_log_ratio"]], "separable_unnormalized_log_ratio() (in module torch_mist.ratio)": [[35, "torch_mist.ratio.separable_unnormalized_log_ratio"]], "torch_mist.ratio": [[35, "module-torch_mist.ratio"]], "unnormalized_log_ratio() (in module torch_mist.ratio)": [[35, "torch_mist.ratio.unnormalized_log_ratio"]], "jointunnormalizedratioestimator (class in torch_mist.ratio.joint)": [[36, "torch_mist.ratio.joint.JointUnnormalizedRatioEstimator"]], "forward() (torch_mist.ratio.joint.jointunnormalizedratioestimator method)": [[36, "torch_mist.ratio.joint.JointUnnormalizedRatioEstimator.forward"]], "torch_mist.ratio.joint": [[36, "module-torch_mist.ratio.joint"]], "separableunnormalizedratioestimator (class in torch_mist.ratio.separable)": [[37, "torch_mist.ratio.separable.SeparableUnnormalizedRatioEstimator"]], "forward() (torch_mist.ratio.separable.separableunnormalizedratioestimator method)": [[37, "torch_mist.ratio.separable.SeparableUnnormalizedRatioEstimator.forward"]], "torch_mist.ratio.separable": [[37, "module-torch_mist.ratio.separable"]], "joint_unnormalized_log_ratio() (in module torch_mist.ratio.utils)": [[38, "torch_mist.ratio.utils.joint_unnormalized_log_ratio"]], "separable_unnormalized_log_ratio() (in module torch_mist.ratio.utils)": [[38, "torch_mist.ratio.utils.separable_unnormalized_log_ratio"]], "torch_mist.ratio.utils": [[38, "module-torch_mist.ratio.utils"]], "unnormalized_log_ratio() (in module torch_mist.ratio.utils)": [[38, "torch_mist.ratio.utils.unnormalized_log_ratio"]], "infomax (class in torch_mist.task)": [[39, "torch_mist.task.InfoMax"]], "__repr__() (torch_mist.task.infomax method)": [[39, "torch_mist.task.InfoMax.__repr__"]], "configure_optimizers() (torch_mist.task.infomax method)": [[39, "torch_mist.task.InfoMax.configure_optimizers"]], "forward() (torch_mist.task.infomax method)": [[39, "torch_mist.task.InfoMax.forward"]], "log_components() (torch_mist.task.infomax method)": [[39, "torch_mist.task.InfoMax.log_components"]], "shared_step() (torch_mist.task.infomax method)": [[39, "torch_mist.task.InfoMax.shared_step"]], "test_step() (torch_mist.task.infomax method)": [[39, "torch_mist.task.InfoMax.test_step"]], "torch_mist.task": [[39, "module-torch_mist.task"]], "training_step() (torch_mist.task.infomax method)": [[39, "torch_mist.task.InfoMax.training_step"]], "validation_step() (torch_mist.task.infomax method)": [[39, "torch_mist.task.InfoMax.validation_step"]], "infomax (class in torch_mist.task.infomax)": [[40, "torch_mist.task.infomax.InfoMax"]], "__repr__() (torch_mist.task.infomax.infomax method)": [[40, "torch_mist.task.infomax.InfoMax.__repr__"]], "configure_optimizers() (torch_mist.task.infomax.infomax method)": [[40, "torch_mist.task.infomax.InfoMax.configure_optimizers"]], "forward() (torch_mist.task.infomax.infomax method)": [[40, "torch_mist.task.infomax.InfoMax.forward"]], "log_components() (torch_mist.task.infomax.infomax method)": [[40, "torch_mist.task.infomax.InfoMax.log_components"]], "shared_step() (torch_mist.task.infomax.infomax method)": [[40, "torch_mist.task.infomax.InfoMax.shared_step"]], "test_step() (torch_mist.task.infomax.infomax method)": [[40, "torch_mist.task.infomax.InfoMax.test_step"]], "torch_mist.task.infomax": [[40, "module-torch_mist.task.infomax"]], "training_step() (torch_mist.task.infomax.infomax method)": [[40, "torch_mist.task.infomax.InfoMax.training_step"]], "validation_step() (torch_mist.task.infomax.infomax method)": [[40, "torch_mist.task.infomax.InfoMax.validation_step"]]}})