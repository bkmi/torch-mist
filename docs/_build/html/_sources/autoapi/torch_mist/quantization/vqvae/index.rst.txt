:py:mod:`torch_mist.quantization.vqvae`
=======================================

.. py:module:: torch_mist.quantization.vqvae


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   torch_mist.quantization.vqvae.VQVAE



Functions
~~~~~~~~~

.. autoapisummary::

   torch_mist.quantization.vqvae.vqvae



Attributes
~~~~~~~~~~

.. autoapisummary::

   torch_mist.quantization.vqvae.INITIAL_PATIENCE


.. py:data:: INITIAL_PATIENCE
   :value: 10.0

   

.. py:class:: VQVAE(encoder: torch_mist.quantization.LearnableVectorQuantization, decoder: pyro.distributions.ConditionalDistribution, beta: float = 0.25, gamma: float = 0.99, cross_modal: bool = False)


   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: loss(x: torch.Tensor, y: Optional[torch.Tensor] = None) -> torch.Tensor



.. py:function:: vqvae(x_dim: int, quantization_dim: int, n_bins: int, hidden_dims: List[int], y_dim: Optional[int] = None, cross_modal: bool = False, decoder_transform_params: Optional[dict] = None, beta: float = 0.2) -> VQVAE


