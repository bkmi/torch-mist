:py:mod:`torch_mist.quantization`
=================================

.. py:module:: torch_mist.quantization


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   functions/index.rst
   vqvae/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   torch_mist.quantization.QuantizationFunction
   torch_mist.quantization.LearnableQuantization
   torch_mist.quantization.FixedQuantization
   torch_mist.quantization.VectorQuantization
   torch_mist.quantization.LearnableVectorQuantization
   torch_mist.quantization.VQVAE



Functions
~~~~~~~~~

.. autoapisummary::

   torch_mist.quantization.vector_quantization
   torch_mist.quantization.vqvae_quantization
   torch_mist.quantization.vqvae
   torch_mist.quantization.train_vqvae



.. py:class:: QuantizationFunction(*args, **kwargs)


   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:property:: n_bins
      :type: int


   .. py:method:: forward(x: torch.Tensor) -> torch.LongTensor



.. py:class:: LearnableQuantization(*args, **kwargs)


   Bases: :py:obj:`QuantizationFunction`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor



.. py:class:: FixedQuantization(input_dim: int, thresholds: torch.Tensor)


   Bases: :py:obj:`QuantizationFunction`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:property:: n_bins
      :type: int


   .. py:method:: forward(x: torch.Tensor) -> torch.LongTensor



.. py:class:: VectorQuantization(input_dim: int, n_bins: int)


   Bases: :py:obj:`QuantizationFunction`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:property:: n_bins
      :type: int


   .. py:method:: codebook_lookup(x: torch.Tensor) -> torch.Tensor


   .. py:method:: forward(x: torch.Tensor) -> torch.LongTensor



.. py:class:: LearnableVectorQuantization(net: torch.nn.Module, quantization_dim: int, n_bins: int)


   Bases: :py:obj:`VectorQuantization`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: forward(x: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: vector_quantization(input_dim: int, n_bins: int, hidden_dims: List[int], quantization_dim: Optional[int] = None) -> LearnableVectorQuantization


.. py:function:: vqvae_quantization(input_dim: int, n_bins: int, hidden_dims: List[int], dataloader: Iterator, quantization_dim: Optional[int] = None, cross_modal: bool = False, decoder_transform_params: Optional[Dict[str, Any]] = None, beta: float = 0.2, max_epochs: int = 1, optimizer_class=torch.optim.Adam, optimizer_params: Optional[Dict[str, Any]] = None, target_dim: Optional[int] = None) -> LearnableVectorQuantization


.. py:class:: VQVAE(encoder: torch_mist.quantization.functions.LearnableVectorQuantization, decoder: pyro.distributions.ConditionalDistribution, beta: float = 0.25, gamma: float = 0.99, cross_modal: bool = False)


   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:property:: quantization
      :type: torch_mist.quantization.functions.QuantizationFunction


   .. py:method:: loss(x: torch.Tensor, y: Optional[torch.Tensor] = None) -> torch.Tensor



.. py:function:: vqvae(x_dim: int, quantization_dim: int, n_bins: int, hidden_dims: List[int], y_dim: Optional[int] = None, cross_modal: bool = False, decoder_transform_params: Optional[dict] = None, beta: float = 0.2) -> VQVAE


.. py:function:: train_vqvae(model: torch.nn.Module, dataloader: Iterator, max_epochs: int, optimizer_class=torch.optim.Adam, optimizer_params: Optional[Dict[str, Any]] = None, cross_modal: bool = False) -> torch.nn.Module


