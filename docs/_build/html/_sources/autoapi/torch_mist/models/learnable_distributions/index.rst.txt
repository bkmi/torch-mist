:py:mod:`torch_mist.models.learnable_distributions`
===================================================

.. py:module:: torch_mist.models.learnable_distributions


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   categorical/index.rst
   transformed_normal/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   torch_mist.models.learnable_distributions.ConditionalFlowTransformedNormal
   torch_mist.models.learnable_distributions.FlowTransformedNormal
   torch_mist.models.learnable_distributions.FlowTransformedJointNormal
   torch_mist.models.learnable_distributions.ConditionalCategoricalMLP
   torch_mist.models.learnable_distributions.ConditionalCategoricalLinear
   torch_mist.models.learnable_distributions.LearnableCategorical




.. py:class:: ConditionalFlowTransformedNormal(x_dim: int, y_dim: int, hidden_dims: Optional[List[int]] = None, transform_name: str = 'conditional_linear', n_transforms: int = 1, transform_params: Dict[Any, Any] = None)


   Bases: :py:obj:`src.torch_mist.distributions.transforms.ConditionalTransformedDistributionModule`


.. py:class:: FlowTransformedNormal(input_dim: int, hidden_dims: Optional[List[int]] = None, transform_name: str = 'linear', n_transforms: int = 1, transform_params: Dict[Any, Any] = None)


   Bases: :py:obj:`src.torch_mist.distributions.transforms.DistributionModule`

   .. py:property:: dist


   .. py:method:: rsample(sample_shape=torch.Size())


   .. py:method:: sample(sample_shape=torch.Size())


   .. py:method:: log_prob(value)



.. py:class:: FlowTransformedJointNormal(x_dim: int, y_dim: int, hidden_dims: Optional[List[int]] = None, transform_name: str = 'linear', n_transforms: int = 1, transform_params: Dict[Any, Any] = None)


   Bases: :py:obj:`src.torch_mist.distributions.joint.base.JointDistribution`, :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:property:: dist


   .. py:attribute:: labels
      :value: ['x', 'y']

      

   .. py:method:: rsample(sample_shape=torch.Size())


   .. py:method:: sample(sample_shape=torch.Size())


   .. py:method:: log_prob(value)



.. py:class:: ConditionalCategoricalMLP(y_dim: int, n_classes: int, hidden_dims: List[int], a_dim: int = 1)


   Bases: :py:obj:`src.torch_mist.distributions.conditional.ConditionalCategorical`


.. py:class:: ConditionalCategoricalLinear(y_dim: int, n_classes: int, a_dim: int = 1)


   Bases: :py:obj:`pyro.distributions.ConditionalDistribution`, :py:obj:`torch.nn.Module`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: condition(x)

      :rtype: torch.distributions.Distribution



.. py:class:: LearnableCategorical(n_classes: int, a_dim: int = 1)


   Bases: :py:obj:`torch.distributions.Distribution`, :py:obj:`torch.nn.Module`

   Distribution is the abstract base class for probability distributions.

   .. py:method:: log_prob(value)

      Returns the log of the probability density/mass function evaluated at
      `value`.

      :param value:
      :type value: Tensor


   .. py:method:: sample(sample_shape=torch.Size())

      Generates a sample_shape shaped sample or sample_shape shaped batch of
      samples if the distribution parameters are batched.


   .. py:method:: rsample(sample_shape=torch.Size())

      Generates a sample_shape shaped reparameterized sample or sample_shape
      shaped batch of reparameterized samples if the distribution parameters
      are batched.


   .. py:method:: __repr__()

      Return repr(self).



