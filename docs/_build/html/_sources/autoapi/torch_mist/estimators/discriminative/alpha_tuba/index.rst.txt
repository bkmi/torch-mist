:py:mod:`torch_mist.estimators.discriminative.alpha_tuba`
=========================================================

.. py:module:: torch_mist.estimators.discriminative.alpha_tuba


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   torch_mist.estimators.discriminative.alpha_tuba.AlphaTUBA



Functions
~~~~~~~~~

.. autoapisummary::

   torch_mist.estimators.discriminative.alpha_tuba.alpha_tuba



.. py:class:: AlphaTUBA(critic: torch_mist.critic.base.Critic, baseline: torch_mist.baselines.Baseline, alpha: float = 0.5, mc_samples: int = -1)


   Bases: :py:obj:`torch_mist.estimators.discriminative.tuba.TUBA`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


.. py:function:: alpha_tuba(x_dim: int, y_dim: int, hidden_dims: List[int], critic_type: str = 'joint', alpha: float = 0.01, learnable_baseline: bool = True, mc_samples=-1, critic_params: Dict[str, Any] = None, baseline_params: Dict[str, Any] = None) -> AlphaTUBA


