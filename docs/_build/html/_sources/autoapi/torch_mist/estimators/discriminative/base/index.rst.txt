:py:mod:`torch_mist.estimators.discriminative.base`
===================================================

.. py:module:: torch_mist.estimators.discriminative.base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   torch_mist.estimators.discriminative.base.EmpiricalDistribution
   torch_mist.estimators.discriminative.base.DiscriminativeMutualInformationEstimator




.. py:class:: EmpiricalDistribution


   Bases: :py:obj:`torch.distributions.Distribution`

   Distribution is the abstract base class for probability distributions.

   .. py:method:: add_samples(samples)


   .. py:method:: sample(sample_shape=torch.Size())

      Generates a sample_shape shaped sample or sample_shape shaped batch of
      samples if the distribution parameters are batched.


   .. py:method:: update()



.. py:class:: DiscriminativeMutualInformationEstimator(critic: torch_mist.critic.base.Critic, neg_samples: int = 1, proposal: Optional[Union[torch.distributions.Distribution, pyro.distributions.ConditionalDistribution]] = None)


   Bases: :py:obj:`torch_mist.estimators.base.MutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: unnormalized_log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: critic_on_positives(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: critic_on_negatives(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: log_normalization(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: compute_log_normalization(x: torch.Tensor, y: torch.Tensor, f_: torch.Tensor)
      :abstractmethod:


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



