:py:mod:`torch_mist.estimators`
===============================

.. py:module:: torch_mist.estimators


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   discriminative/index.rst
   generative/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst
   hybrid/index.rst
   utils/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   torch_mist.estimators.MutualInformationEstimator
   torch_mist.estimators.GenerativeMutualInformationEstimator
   torch_mist.estimators.BA
   torch_mist.estimators.DoE
   torch_mist.estimators.GM
   torch_mist.estimators.L1Out
   torch_mist.estimators.CLUB
   torch_mist.estimators.PQ
   torch_mist.estimators.DiscreteMutualInformationEstimator
   torch_mist.estimators.DiscriminativeMutualInformationEstimator
   torch_mist.estimators.NWJ
   torch_mist.estimators.MINE
   torch_mist.estimators.InfoNCE
   torch_mist.estimators.JS
   torch_mist.estimators.TUBA
   torch_mist.estimators.SMILE
   torch_mist.estimators.AlphaTUBA
   torch_mist.estimators.FLO
   torch_mist.estimators.HybridMutualInformationEstimator



Functions
~~~~~~~~~

.. autoapisummary::

   torch_mist.estimators.ba
   torch_mist.estimators.doe
   torch_mist.estimators.gm
   torch_mist.estimators.l1out
   torch_mist.estimators.club
   torch_mist.estimators.pq
   torch_mist.estimators.discrete
   torch_mist.estimators.nwj
   torch_mist.estimators.mine
   torch_mist.estimators.infonce
   torch_mist.estimators.js
   torch_mist.estimators.tuba
   torch_mist.estimators.smile
   torch_mist.estimators.alpha_tuba
   torch_mist.estimators.flo



.. py:class:: MutualInformationEstimator(*args, **kwargs)


   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor
      :abstractmethod:


   .. py:method:: expected_log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: unnormalized_log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor
      :abstractmethod:


   .. py:method:: forward(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor

      Compute an estimation for I(x,y).
      :param x: a tensor with shape [N, D] in which x[i] is sampled from p(x)
      :param y: a tensor with shape [N, D] in which y[i] is sampled from p(y|x[i])

      :returns: the expected (weighted) log ratio
      :rtype: estimation



.. py:class:: GenerativeMutualInformationEstimator(q_Y_given_X: pyro.distributions.ConditionalDistribution)


   Bases: :py:obj:`torch_mist.estimators.base.MutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: q_Y_given_x(x: torch.Tensor) -> torch.distributions.Distribution


   .. py:method:: approx_log_p_y_given_x(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor
      :abstractmethod:


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: BA(q_Y_given_X: pyro.distributions.ConditionalDistribution, entropy_y: Optional[torch.Tensor] = None)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: expected_log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor



.. py:function:: ba(entropy_y: Union[float, torch.Tensor], x_dim: Optional[int] = None, y_dim: Optional[int] = None, hidden_dims: Optional[List[int]] = None, q_Y_given_X: Optional[pyro.distributions.ConditionalDistribution] = None, transform_name: str = 'conditional_linear', n_transforms: int = 1) -> BA


.. py:class:: DoE(q_Y_given_X: pyro.distributions.ConditionalDistribution, q_Y: torch.distributions.Distribution)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: approx_log_p_y(y: torch.Tensor, x: Optional[torch.Tensor] = None) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: doe(x_dim: Optional[int] = None, y_dim: Optional[int] = None, hidden_dims: Optional[List[int]] = None, q_Y_given_X: Optional[pyro.distributions.ConditionalDistribution] = None, q_Y: Optional[torch.distributions.Distribution] = None, conditional_transform_name: str = 'conditional_linear', n_conditional_transforms: int = 1, marginal_transform_name: str = 'linear', n_marginal_transforms: int = 1) -> DoE


.. py:class:: GM(q_XY: torch_mist.distributions.joint.JointDistribution, q_Y: torch.distributions.Distribution, q_X: torch.distributions.Distribution)


   Bases: :py:obj:`torch_mist.estimators.generative.doe.DoE`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: approx_log_p_x(x: torch.Tensor, y: Optional[torch.Tensor] = None) -> torch.Tensor


   .. py:method:: approx_log_p_xy(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_x_given_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: gm(x_dim: Optional[int] = None, y_dim: Optional[int] = None, hidden_dims: List[int] = None, q_XY: Optional[torch_mist.distributions.joint.JointDistribution] = None, q_Y: Optional[torch.distributions.Distribution] = None, q_X: Optional[torch.distributions.Distribution] = None, joint_transform_name: str = 'affine_autoregressive', n_joint_transforms: int = 1, marginal_transform_name: str = 'linear', n_marginal_transforms: int = 1) -> GM


.. py:class:: L1Out(q_Y_given_X: pyro.distributions.ConditionalDistribution)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: approx_log_p_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor
      :abstractmethod:


   .. py:method:: expected_log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor



.. py:function:: l1out(x_dim: Optional[int] = None, y_dim: Optional[int] = None, hidden_dims: Optional[List[int]] = None, q_Y_given_X: Optional[pyro.distributions.ConditionalDistribution] = None, transform_name: str = 'conditional_linear', n_transforms: int = 1) -> L1Out


.. py:class:: CLUB(q_Y_given_X: pyro.distributions.ConditionalDistribution, sample: str = 'all')


   Bases: :py:obj:`torch_mist.estimators.generative.l1out.L1Out`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: approx_log_p_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor



.. py:function:: club(x_dim: Optional[int] = None, y_dim: Optional[int] = None, hidden_dims: Optional[List[int]] = None, q_Y_given_X: Optional[pyro.distributions.ConditionalDistribution] = None, transform_name: str = 'conditional_linear', n_transforms: int = 1) -> CLUB


.. py:class:: PQ(q_QX_given_Y: pyro.distributions.ConditionalDistribution, Q_x: torch_mist.quantization.functions.QuantizationFunction, temperature: float = 1.0)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: quantize_x(x: torch.Tensor) -> torch.Tensor


   .. py:method:: q_QX_given_y(y: torch.Tensor) -> torch.distributions.Distribution


   .. py:method:: approx_log_p_qx_given_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_qx(x: torch.Tensor, y: Optional[torch.Tensor] = None) -> torch.Tensor


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: pq(Q_x: torch_mist.quantization.functions.QuantizationFunction, y_dim: Optional[int] = None, hidden_dims: Optional[List[int]] = None, q_QX_given_Y: Optional[pyro.distributions.ConditionalDistribution] = None, temperature: float = 0.1) -> PQ


.. py:class:: DiscreteMutualInformationEstimator(Q_x: Optional[torch_mist.quantization.functions.QuantizationFunction] = None, Q_y: Optional[torch_mist.quantization.functions.QuantizationFunction] = None, temperature: float = 1.0)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:property:: logits
      :type: torch.Tensor


   .. py:method:: quantize_x(x: torch.Tensor) -> torch.Tensor


   .. py:method:: quantize_y(y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_qxqy(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_qx(x: torch.Tensor, y: Optional[torch.Tensor] = None) -> torch.Tensor


   .. py:method:: approx_log_p_qy(y: torch.Tensor, x: Optional[torch.Tensor] = None) -> torch.Tensor


   .. py:method:: log_p_qx_given_qy(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_qy_given_qx(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: discrete(Q_x: Optional[torch_mist.quantization.functions.QuantizationFunction] = None, Q_y: Optional[torch_mist.quantization.functions.QuantizationFunction] = None, temperature: float = 0.1) -> DiscreteMutualInformationEstimator


.. py:class:: DiscriminativeMutualInformationEstimator(critic: torch_mist.critic.base.Critic, neg_samples: int = 1, proposal: Optional[Union[torch.distributions.Distribution, pyro.distributions.ConditionalDistribution]] = None)


   Bases: :py:obj:`torch_mist.estimators.base.MutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: unnormalized_log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: critic_on_positives(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: critic_on_negatives(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: log_normalization(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: compute_log_normalization(x: torch.Tensor, y: torch.Tensor, f_: torch.Tensor)
      :abstractmethod:


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: NWJ(critic: torch_mist.critic.base.Critic, neg_samples: int = 1)


   Bases: :py:obj:`torch_mist.estimators.discriminative.tuba.TUBA`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


.. py:function:: nwj(x_dim: int, y_dim: int, hidden_dims: List[int], neg_samples: int = 1, critic_type: str = 'joint', critic_params: Dict[str, Any] = None) -> NWJ


.. py:class:: MINE(critic: torch_mist.critic.base.Critic, neg_samples: int = 1, gamma: float = 0.9)


   Bases: :py:obj:`torch_mist.estimators.discriminative.tuba.TUBA`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


.. py:function:: mine(x_dim: int, y_dim: int, hidden_dims: List[int], critic_type: str = 'joint', neg_samples: int = 1, gamma: float = 0.9, critic_params: Dict[str, Any] = None) -> MINE


.. py:class:: InfoNCE(critic: torch_mist.critic.separable.SeparableCritic)


   Bases: :py:obj:`torch_mist.estimators.discriminative.tuba.TUBA`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: compute_log_normalization(x: torch.Tensor, y: torch.Tensor, f_: torch.tensor)



.. py:function:: infonce(x_dim: int, y_dim: int, hidden_dims: List[int], critic_type='separable', critic_params: Dict[str, Any] = None) -> InfoNCE


.. py:class:: JS(critic: torch_mist.critic.base.Critic, neg_samples: int = 1)


   Bases: :py:obj:`torch_mist.estimators.discriminative.tuba.TUBA`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> Optional[torch.Tensor]



.. py:function:: js(x_dim: int, y_dim: int, hidden_dims: List[int], critic_type: str = 'joint', neg_samples: int = 1, critic_params: Dict[str, Any] = None) -> JS


.. py:class:: TUBA(critic: torch_mist.critic.base.Critic, baseline: torch_mist.baselines.Baseline, grad_baseline: Optional[torch_mist.baselines.Baseline] = None, neg_samples: int = 1)


   Bases: :py:obj:`torch_mist.estimators.discriminative.base.DiscriminativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: log_normalization_loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: compute_log_normalization(x: torch.Tensor, y: torch.Tensor, f_: torch.Tensor) -> torch.Tensor


   .. py:method:: compute_log_normalization_loss(x: torch.Tensor, y: torch.Tensor, f_: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: tuba(x_dim: int, y_dim: int, hidden_dims: List[int], critic_type: str = 'joint', neg_samples: int = 1, critic_params: Dict[str, Any] = None, baseline_params: Dict[str, Any] = None) -> TUBA


.. py:class:: SMILE(critic: torch_mist.critic.base.Critic, neg_samples: int = 1, tau: float = 5.0)


   Bases: :py:obj:`torch_mist.estimators.discriminative.tuba.TUBA`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: compute_log_normalization(x: torch.Tensor, y: torch.Tensor, f_: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> Optional[torch.Tensor]



.. py:function:: smile(x_dim: int, y_dim: int, hidden_dims: List[int], critic_type: str = 'joint', neg_samples: int = 1, tau: float = 5.0, critic_params: Dict[str, Any] = None) -> SMILE


.. py:class:: AlphaTUBA(critic: torch_mist.critic.base.Critic, baseline: torch_mist.baselines.Baseline, alpha: float = 0.5, neg_samples: int = -1)


   Bases: :py:obj:`torch_mist.estimators.discriminative.tuba.TUBA`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


.. py:function:: alpha_tuba(x_dim: int, y_dim: int, hidden_dims: List[int], critic_type: str = 'joint', alpha: float = 0.01, learnable_baseline: bool = True, neg_samples=-1, critic_params: Dict[str, Any] = None, baseline_params: Dict[str, Any] = None) -> AlphaTUBA


.. py:class:: FLO(critic: torch_mist.critic.base.Critic, baseline: torch_mist.baselines.LearnableJointBaseline, neg_samples: int = 1)


   Bases: :py:obj:`torch_mist.estimators.discriminative.base.DiscriminativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor



.. py:function:: flo(x_dim: int, y_dim: int, hidden_dims: List[int], critic_type: str = 'joint', neg_samples: int = 1, critic_params: Dict[str, Any] = None, baseline_params: Dict[str, Any] = None) -> FLO


.. py:class:: HybridMutualInformationEstimator(generative_estimator: Optional[torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator] = None, discriminative_estimator: Optional[torch_mist.estimators.discriminative.base.DiscriminativeMutualInformationEstimator] = None, train_generative_estimator: bool = True, train_discriminative_estimator: bool = True)


   Bases: :py:obj:`torch_mist.estimators.base.MutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: expected_log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: unnormalized_log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor



