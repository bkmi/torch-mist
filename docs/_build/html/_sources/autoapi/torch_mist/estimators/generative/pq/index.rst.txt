:py:mod:`torch_mist.estimators.generative.pq`
=============================================

.. py:module:: torch_mist.estimators.generative.pq


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   torch_mist.estimators.generative.pq.SameBucketConditionalDistribution
   torch_mist.estimators.generative.pq.PQ



Functions
~~~~~~~~~

.. autoapisummary::

   torch_mist.estimators.generative.pq.pq



.. py:class:: SameBucketConditionalDistribution(Q: torch_mist.quantization.functions.QuantizationFunction)


   Bases: :py:obj:`pyro.distributions.ConditionalDistribution`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: condition(context: torch.Tensor)

      :rtype: torch.distributions.Distribution



.. py:class:: PQ(q_QX_given_Y: pyro.distributions.ConditionalDistribution, Q_x: torch_mist.quantization.functions.QuantizationFunction, temperature: float = 1.0)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: quantize_x(x: torch.Tensor) -> torch.Tensor


   .. py:method:: q_QX_given_y(y: torch.Tensor) -> torch.distributions.Distribution


   .. py:method:: approx_log_p_qx_given_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_qx(x: torch.Tensor, y: Optional[torch.Tensor] = None) -> torch.Tensor


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: pq(Q_x: torch_mist.quantization.functions.QuantizationFunction, x_dim: Optional[int] = None, hidden_dims: Optional[List[int]] = None, q_QX_given_Y: Optional[pyro.distributions.ConditionalDistribution] = None, temperature: float = 0.1) -> PQ


