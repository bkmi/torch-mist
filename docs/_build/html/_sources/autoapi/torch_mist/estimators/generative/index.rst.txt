:py:mod:`torch_mist.estimators.generative`
==========================================

.. py:module:: torch_mist.estimators.generative


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   ba/index.rst
   base/index.rst
   club/index.rst
   doe/index.rst
   gm/index.rst
   l1out/index.rst
   pq/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   torch_mist.estimators.generative.VariationalProposalMutualInformationEstimator
   torch_mist.estimators.generative.GenerativeMutualInformationEstimator
   torch_mist.estimators.generative.BA
   torch_mist.estimators.generative.DoE
   torch_mist.estimators.generative.GM
   torch_mist.estimators.generative.L1Out
   torch_mist.estimators.generative.CLUB
   torch_mist.estimators.generative.PQ



Functions
~~~~~~~~~

.. autoapisummary::

   torch_mist.estimators.generative.ba
   torch_mist.estimators.generative.doe
   torch_mist.estimators.generative.gm
   torch_mist.estimators.generative.l1out
   torch_mist.estimators.generative.club
   torch_mist.estimators.generative.pq



.. py:class:: VariationalProposalMutualInformationEstimator(conditional_y_x: pyro.distributions.ConditionalDistribution)


   Bases: :py:obj:`GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: log_prob_y_x(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: compute_loss(x: torch.Tensor, y: torch.Tensor, log_p_y: torch.Tensor, log_p_y_x: torch.Tensor) -> Optional[torch.Tensor]


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: GenerativeMutualInformationEstimator(*args, **kwargs)


   Bases: :py:obj:`torch_mist.estimators.base.MutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: log_prob_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: log_prob_y_x(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: compute_loss(x: torch.Tensor, y: torch.Tensor, log_p_y: torch.Tensor, log_p_y_x: torch.Tensor) -> Optional[torch.Tensor]


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch_mist.estimators.base.Estimation



.. py:class:: BA(conditional_y_x: pyro.distributions.ConditionalDistribution, marginal_y: Optional[torch.distributions.Distribution] = None, entropy_y: Optional[torch.Tensor] = None)


   Bases: :py:obj:`torch_mist.estimators.generative.base.VariationalProposalMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: log_prob_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: compute_loss(x: torch.Tensor, y: torch.Tensor, log_p_y: torch.Tensor, log_p_y_x: torch.Tensor) -> Optional[torch.Tensor]



.. py:function:: ba(x_dim: int, y_dim: int, hidden_dims: List[int], entropy_y: Union[float, torch.Tensor], transform_name: str = 'conditional_linear', n_transforms: int = 1) -> BA


.. py:class:: DoE(conditional_y_x: pyro.distributions.ConditionalDistribution, marginal_y: torch.distributions.Distribution)


   Bases: :py:obj:`torch_mist.estimators.generative.ba.BA`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: doe(x_dim: int, y_dim: int, hidden_dims: List[int], conditional_transform_name: str = 'conditional_linear', n_conditional_transforms: int = 1, marginal_transform_name: str = 'linear', n_marginal_transforms: int = 1) -> DoE


.. py:class:: GM(joint_xy: torch.distributions.Distribution, marginal_y: Optional[torch.distributions.Distribution] = None, marginal_x: Optional[torch.distributions.Distribution] = None, entropy_y: Optional[torch.Tensor] = None, entropy_x: Optional[torch.Tensor] = None)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: log_prob_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: log_prob_x(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: log_prob_y_x(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: compute_loss(x: torch.Tensor, y: torch.Tensor, log_p_y: torch.Tensor, log_p_y_x: torch.Tensor)


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: gm(x_dim: int, y_dim: int, hidden_dims: List[int], entropy_x: Optional[Union[torch.Tensor, float]] = None, entropy_y: Optional[Union[torch.Tensor, float]] = None, joint_transform_name: str = 'conditional_linear', n_joint_transforms: int = 1, marginal_transform_name: str = 'linear', n_marginal_transforms: int = 1) -> GM


.. py:class:: L1Out(conditional_y_x: pyro.distributions.ConditionalDistribution)


   Bases: :py:obj:`torch_mist.estimators.generative.base.VariationalProposalMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: log_prob_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor



.. py:function:: l1out(x_dim: int, y_dim: int, hidden_dims: List[int], transform_name: str = 'conditional_linear', n_transforms: int = 1) -> L1Out


.. py:class:: CLUB(conditional_y_x: pyro.distributions.ConditionalDistribution, sample: str = 'all')


   Bases: :py:obj:`torch_mist.estimators.generative.base.VariationalProposalMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: log_prob_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor



.. py:function:: club(x_dim: int, y_dim: int, hidden_dims: List[int], transform_name: str = 'conditional_linear', n_transforms: int = 1) -> CLUB


.. py:class:: PQ(conditional_qy_x: pyro.distributions.ConditionalDistribution, quantization: torch_mist.quantization.QuantizationFunction, temperature: float = 0.1)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch_mist.estimators.base.Estimation



.. py:function:: pq(x_dim: int, quantization: torch_mist.quantization.QuantizationFunction, hidden_dims: List[int]) -> PQ


