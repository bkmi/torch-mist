:py:mod:`torch_mist.estimators.generative`
==========================================

.. py:module:: torch_mist.estimators.generative


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   ba/index.rst
   base/index.rst
   club/index.rst
   discrete/index.rst
   doe/index.rst
   gm/index.rst
   l1out/index.rst
   pq/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   torch_mist.estimators.generative.GenerativeMutualInformationEstimator
   torch_mist.estimators.generative.BA
   torch_mist.estimators.generative.DoE
   torch_mist.estimators.generative.GM
   torch_mist.estimators.generative.L1Out
   torch_mist.estimators.generative.CLUB
   torch_mist.estimators.generative.PQ
   torch_mist.estimators.generative.DiscreteMutualInformationEstimator



Functions
~~~~~~~~~

.. autoapisummary::

   torch_mist.estimators.generative.ba
   torch_mist.estimators.generative.doe
   torch_mist.estimators.generative.gm
   torch_mist.estimators.generative.l1out
   torch_mist.estimators.generative.club
   torch_mist.estimators.generative.pq
   torch_mist.estimators.generative.discrete



.. py:class:: GenerativeMutualInformationEstimator(q_Y_given_X: pyro.distributions.ConditionalDistribution)


   Bases: :py:obj:`torch_mist.estimators.base.MutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: q_Y_given_x(x: torch.Tensor) -> torch.distributions.Distribution


   .. py:method:: approx_log_p_y_given_x(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor
      :abstractmethod:


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: BA(q_Y_given_X: pyro.distributions.ConditionalDistribution, entropy_y: Optional[torch.Tensor] = None)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: expected_log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor



.. py:function:: ba(entropy_y: Union[float, torch.Tensor], x_dim: Optional[int] = None, y_dim: Optional[int] = None, hidden_dims: Optional[List[int]] = None, q_Y_given_X: Optional[pyro.distributions.ConditionalDistribution] = None, transform_name: str = 'conditional_linear', n_transforms: int = 1) -> BA


.. py:class:: DoE(q_Y_given_X: pyro.distributions.ConditionalDistribution, q_Y: torch.distributions.Distribution)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: approx_log_p_y(y: torch.Tensor, x: Optional[torch.Tensor] = None) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: doe(x_dim: Optional[int] = None, y_dim: Optional[int] = None, hidden_dims: Optional[List[int]] = None, q_Y_given_X: Optional[pyro.distributions.ConditionalDistribution] = None, q_Y: Optional[torch.distributions.Distribution] = None, conditional_transform_name: str = 'conditional_linear', n_conditional_transforms: int = 1, marginal_transform_name: str = 'linear', n_marginal_transforms: int = 1) -> DoE


.. py:class:: GM(q_XY: torch_mist.distributions.joint.JointDistribution, q_Y: torch.distributions.Distribution, q_X: torch.distributions.Distribution)


   Bases: :py:obj:`torch_mist.estimators.generative.doe.DoE`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: approx_log_p_x(x: torch.Tensor, y: Optional[torch.Tensor] = None) -> torch.Tensor


   .. py:method:: approx_log_p_xy(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_x_given_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: gm(x_dim: Optional[int] = None, y_dim: Optional[int] = None, hidden_dims: List[int] = None, q_XY: Optional[torch_mist.distributions.joint.JointDistribution] = None, q_Y: Optional[torch.distributions.Distribution] = None, q_X: Optional[torch.distributions.Distribution] = None, joint_transform_name: str = 'affine_autoregressive', n_joint_transforms: int = 1, marginal_transform_name: str = 'linear', n_marginal_transforms: int = 1) -> GM


.. py:class:: L1Out(q_Y_given_X: pyro.distributions.ConditionalDistribution)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: approx_log_p_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor
      :abstractmethod:


   .. py:method:: expected_log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor



.. py:function:: l1out(x_dim: Optional[int] = None, y_dim: Optional[int] = None, hidden_dims: Optional[List[int]] = None, q_Y_given_X: Optional[pyro.distributions.ConditionalDistribution] = None, transform_name: str = 'conditional_linear', n_transforms: int = 1) -> L1Out


.. py:class:: CLUB(q_Y_given_X: pyro.distributions.ConditionalDistribution, sample: str = 'all')


   Bases: :py:obj:`torch_mist.estimators.generative.l1out.L1Out`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: approx_log_p_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor



.. py:function:: club(x_dim: Optional[int] = None, y_dim: Optional[int] = None, hidden_dims: Optional[List[int]] = None, q_Y_given_X: Optional[pyro.distributions.ConditionalDistribution] = None, transform_name: str = 'conditional_linear', n_transforms: int = 1) -> CLUB


.. py:class:: PQ(q_QX_given_Y: pyro.distributions.ConditionalDistribution, Q_x: torch_mist.quantization.functions.QuantizationFunction, temperature: float = 1.0)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: quantize_x(x: torch.Tensor) -> torch.Tensor


   .. py:method:: q_QX_given_y(y: torch.Tensor) -> torch.distributions.Distribution


   .. py:method:: approx_log_p_qx_given_y(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_qx(x: torch.Tensor, y: Optional[torch.Tensor] = None) -> torch.Tensor


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: pq(Q_x: torch_mist.quantization.functions.QuantizationFunction, x_dim: Optional[int] = None, hidden_dims: Optional[List[int]] = None, q_QX_given_Y: Optional[pyro.distributions.ConditionalDistribution] = None, temperature: float = 0.1) -> PQ


.. py:class:: DiscreteMutualInformationEstimator(Q_x: Optional[torch_mist.quantization.functions.QuantizationFunction] = None, Q_y: Optional[torch_mist.quantization.functions.QuantizationFunction] = None, temperature: float = 1.0)


   Bases: :py:obj:`torch_mist.estimators.generative.base.GenerativeMutualInformationEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:property:: logits
      :type: torch.Tensor


   .. py:method:: quantize_x(x: torch.Tensor) -> torch.Tensor


   .. py:method:: quantize_y(y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_qxqy(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_qx(x: torch.Tensor, y: Optional[torch.Tensor] = None) -> torch.Tensor


   .. py:method:: approx_log_p_qy(y: torch.Tensor, x: Optional[torch.Tensor] = None) -> torch.Tensor


   .. py:method:: log_p_qx_given_qy(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: approx_log_p_qy_given_qx(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: loss(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: discrete(Q_x: Optional[torch_mist.quantization.functions.QuantizationFunction] = None, Q_y: Optional[torch_mist.quantization.functions.QuantizationFunction] = None, temperature: float = 0.1) -> DiscreteMutualInformationEstimator


