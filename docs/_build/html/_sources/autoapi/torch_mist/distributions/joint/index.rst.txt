:py:mod:`torch_mist.distributions.joint`
========================================

.. py:module:: torch_mist.distributions.joint


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   torch_mist.distributions.joint.JointDistribution
   torch_mist.distributions.joint.ConditionedRatioDistribution
   torch_mist.distributions.joint.ConditionalRatioDistribution




.. py:class:: JointDistribution(joint_dist: torch.distributions.Distribution, dims: List[int], names: List[str])


   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: log_prob(*args, **kwargs) -> torch.Tensor


   .. py:method:: sample(sample_shape: torch.Size = torch.Size()) -> Dict[str, torch.Tensor]


   .. py:method:: rsample(sample_shape: torch.Size = torch.Size()) -> Dict[str, torch.Tensor]



.. py:class:: ConditionedRatioDistribution(joint: JointDistribution, log_marginal: torch.Tensor, conditioning: Dict[str, torch.Tensor])


   Bases: :py:obj:`torch.distributions.Distribution`

   Distribution is the abstract base class for probability distributions.

   .. py:method:: log_prob(*args, **kwargs) -> torch.Tensor

      Returns the log of the probability density/mass function evaluated at
      `value`.

      :param value:
      :type value: Tensor



.. py:class:: ConditionalRatioDistribution(joint: JointDistribution, marginal: Union[JointDistribution, torch.distributions.Distribution])


   Bases: :py:obj:`torch_mist.distributions.transforms.ConditionalDistributionModule`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: condition(*args, **kwargs) -> ConditionedRatioDistribution

      :rtype: torch.distributions.Distribution



