:py:mod:`torch_mist.distributions.conditional`
==============================================

.. py:module:: torch_mist.distributions.conditional


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   categorical/index.rst
   correlated_normal/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   torch_mist.distributions.conditional.CorrelatedNormal
   torch_mist.distributions.conditional.CubicCorrelatedNormal
   torch_mist.distributions.conditional.SkewedCorrelatedNormal
   torch_mist.distributions.conditional.ConditionalCategorical




.. py:class:: CorrelatedNormal(rho: float)


   Bases: :py:obj:`pyro.distributions.ConditionalDistribution`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: condition(context)

      :rtype: torch.distributions.Distribution



.. py:class:: CubicCorrelatedNormal(rho: float)


   Bases: :py:obj:`pyro.distributions.ConditionalDistribution`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: condition(context)

      :rtype: torch.distributions.Distribution



.. py:class:: SkewedCorrelatedNormal(rho: float)


   Bases: :py:obj:`pyro.distributions.ConditionalDistribution`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: condition(context)

      :rtype: torch.distributions.Distribution



.. py:class:: ConditionalCategorical(net: torch.nn.Module)


   Bases: :py:obj:`pyro.distributions.ConditionalDistribution`, :py:obj:`torch.nn.Module`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: condition(x)

      :rtype: torch.distributions.Distribution



