:py:mod:`torch_mist.data.multimixture`
======================================

.. py:module:: torch_mist.data.multimixture


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   torch_mist.data.multimixture.MultivariateCorrelatedNormalMixture




.. py:class:: MultivariateCorrelatedNormalMixture(rho: float = 0.95, sigma: float = 0.1, epsilon: float = 0.15, delta: float = 1.5, n_dim: int = 5)


   Bases: :py:obj:`torch.distributions.MixtureSameFamily`

   The `MixtureSameFamily` distribution implements a (batch of) mixture
   distribution where all component are from different parameterizations of
   the same distribution type. It is parameterized by a `Categorical`
   "selecting distribution" (over `k` component) and a component
   distribution, i.e., a `Distribution` with a rightmost batch shape
   (equal to `[k]`) which indexes each (batch of) component.

   Examples::

       >>> # xdoctest: +SKIP("undefined vars")
       >>> # Construct Gaussian Mixture Model in 1D consisting of 5 equally
       >>> # weighted normal distributions
       >>> mix = D.Categorical(torch.ones(5,))
       >>> comp = D.Normal(torch.randn(5,), torch.rand(5,))
       >>> gmm = MixtureSameFamily(mix, comp)

       >>> # Construct Gaussian Mixture Modle in 2D consisting of 5 equally
       >>> # weighted bivariate normal distributions
       >>> mix = D.Categorical(torch.ones(5,))
       >>> comp = D.Independent(D.Normal(
       ...          torch.randn(5,2), torch.rand(5,2)), 1)
       >>> gmm = MixtureSameFamily(mix, comp)

       >>> # Construct a batch of 3 Gaussian Mixture Models in 2D each
       >>> # consisting of 5 random weighted bivariate normal distributions
       >>> mix = D.Categorical(torch.rand(3,5))
       >>> comp = D.Independent(D.Normal(
       ...         torch.randn(3,5,2), torch.rand(3,5,2)), 1)
       >>> gmm = MixtureSameFamily(mix, comp)

   :param mixture_distribution: `torch.distributions.Categorical`-like
                                instance. Manages the probability of selecting component.
                                The number of categories must match the rightmost batch
                                dimension of the `component_distribution`. Must have either
                                scalar `batch_shape` or `batch_shape` matching
                                `component_distribution.batch_shape[:-1]`
   :param component_distribution: `torch.distributions.Distribution`-like
                                  instance. Right-most batch dimension indexes component.


