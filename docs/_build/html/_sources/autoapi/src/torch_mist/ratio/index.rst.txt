:py:mod:`src.torch_mist.ratio`
==============================

.. py:module:: src.torch_mist.ratio


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst
   conditional_dist/index.rst
   joint/index.rst
   separable/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   src.torch_mist.ratio.UnnormalizedRatioEstimator
   src.torch_mist.ratio.JointUnnormalizedRatioEstimator
   src.torch_mist.ratio.JointRatioEstimatorMLP
   src.torch_mist.ratio.SeparableUnnormalizedRatioEstimator
   src.torch_mist.ratio.SeparableRatioEstimatorMLP




.. py:class:: UnnormalizedRatioEstimator(*args, **kwargs)


   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: forward(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor

      Compute the value of the critic evaluated at the pair (x, y)
      :param x: a tensor representing x
      :param y: a tensor representing y
      :return: The value of the ratio estimator on the given pair



.. py:class:: JointUnnormalizedRatioEstimator(joint_net: torch.nn.Module)


   Bases: :py:obj:`src.torch_mist.ratio.base.UnnormalizedRatioEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: forward(x, y) -> torch.Tensor

      Compute the value of the critic evaluated at the pair (x, y)
      :param x: a tensor representing x
      :param y: a tensor representing y
      :return: The value of the ratio estimator on the given pair



.. py:class:: JointRatioEstimatorMLP(x_dim: int, y_dim: int, hidden_dims: List[int])


   Bases: :py:obj:`JointUnnormalizedRatioEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


.. py:class:: SeparableUnnormalizedRatioEstimator(f_x: Optional[torch.nn.Module] = None, f_y: Optional[torch.nn.Module] = None, temperature: float = 1.0)


   Bases: :py:obj:`src.torch_mist.ratio.base.UnnormalizedRatioEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: forward(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor

      Compute the value of the critic evaluated at the pair (x, y)
      :param x: a tensor representing x
      :param y: a tensor representing y
      :return: The value of the ratio estimator on the given pair



.. py:class:: SeparableRatioEstimatorMLP(x_dim: int, y_dim: int, hidden_dims: List[int], transform_x: bool = True, transform_y: bool = False, same_transform: bool = True, normalize_outputs: bool = False, out_dim: Optional[int] = None, temperature: float = 1.0)


   Bases: :py:obj:`SeparableUnnormalizedRatioEstimator`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


