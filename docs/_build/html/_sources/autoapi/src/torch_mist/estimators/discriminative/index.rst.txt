:py:mod:`src.torch_mist.estimators.discriminative`
==================================================

.. py:module:: src.torch_mist.estimators.discriminative


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.torch_mist.estimators.discriminative.EmpiricalDistribution
   src.torch_mist.estimators.discriminative.DiscriminativeMutualInformationEstimator
   src.torch_mist.estimators.discriminative.NWJ
   src.torch_mist.estimators.discriminative.TUBA
   src.torch_mist.estimators.discriminative.MINE
   src.torch_mist.estimators.discriminative.InfoNCE
   src.torch_mist.estimators.discriminative.JS
   src.torch_mist.estimators.discriminative.AlphaTUBA
   src.torch_mist.estimators.discriminative.SMILE
   src.torch_mist.estimators.discriminative.FLO




.. py:class:: EmpiricalDistribution(samples)


   Bases: :py:obj:`torch.distributions.Distribution`

   Distribution is the abstract base class for probability distributions.

   .. py:method:: sample_n(n_samples: int)

      Generates n samples or n batches of samples if the distribution
      parameters are batched.



.. py:class:: DiscriminativeMutualInformationEstimator(unnormalized_log_ratio: src.torch_mist.ratio.UnnormalizedRatioEstimator, mc_samples: int = 1)


   Bases: :py:obj:`src.torch_mist.estimators.base.MutualInformationEstimator`

   .. py:attribute:: lower_bound
      :value: True

      

   .. py:attribute:: upper_bound
      :value: False

      

   .. py:attribute:: proposal
      :type: Optional[Union[pyro.distributions.ConditionalDistribution, torch.distributions.Distribution]]

      

   .. py:method:: sample_proposal(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor


   .. py:method:: log_ratio(x: torch.Tensor, y: torch.Tensor) -> src.torch_mist.estimators.base.Estimation


   .. py:method:: _compute_log_ratio(x: torch.Tensor, y: torch.Tensor, f: torch.Tensor, y_: torch.Tensor, f_: torch.Tensor) -> torch.Tensor
      :abstractmethod:


   .. py:method:: _compute_log_ratio_grad(x: torch.Tensor, y: torch.Tensor, f: torch.Tensor, y_: torch.Tensor, f_: torch.Tensor) -> Optional[torch.Tensor]


   .. py:method:: __repr__()



.. py:class:: NWJ(unnormalized_log_ratio: src.torch_mist.ratio.UnnormalizedRatioEstimator, mc_samples: int = 1)


   Bases: :py:obj:`DiscriminativeMutualInformationEstimator`

   .. py:method:: _compute_log_ratio(x: torch.Tensor, y: torch.Tensor, y_: torch.Tensor, f: torch.Tensor, f_: torch.Tensor) -> torch.Tensor



.. py:class:: TUBA(unnormalized_log_ratio: src.torch_mist.ratio.UnnormalizedRatioEstimator, baseline: src.torch_mist.baselines.Baseline, grad_baseline: Optional[src.torch_mist.baselines.Baseline] = None, mc_samples: int = 1)


   Bases: :py:obj:`NWJ`

   .. py:method:: _compute_log_ratio(x: torch.Tensor, y: torch.Tensor, f: torch.Tensor, y_: torch.Tensor, f_: torch.Tensor) -> torch.Tensor


   .. py:method:: _compute_log_ratio_grad(x: torch.Tensor, y: torch.Tensor, f: torch.Tensor, y_: torch.Tensor, f_: torch.Tensor) -> Optional[torch.Tensor]



.. py:class:: MINE(unnormalized_log_ratio: src.torch_mist.ratio.UnnormalizedRatioEstimator, mc_samples: int = 1, gamma: float = 0.9)


   Bases: :py:obj:`TUBA`


.. py:class:: InfoNCE(unnormalized_log_ratio: src.torch_mist.ratio.SeparableUnnormalizedRatioEstimator, mc_samples: int = 0)


   Bases: :py:obj:`DiscriminativeMutualInformationEstimator`

   .. py:method:: _compute_log_ratio(x: torch.Tensor, y: torch.Tensor, y_: torch.Tensor, f: torch.Tensor, f_: torch.Tensor) -> torch.Tensor



.. py:class:: JS(unnormalized_log_ratio: src.torch_mist.ratio.UnnormalizedRatioEstimator, mc_samples: int = 1)


   Bases: :py:obj:`NWJ`

   .. py:method:: _compute_log_ratio_grad(x: torch.Tensor, y: torch.Tensor, f: torch.Tensor, y_: torch.Tensor, f_: torch.Tensor) -> Optional[torch.Tensor]



.. py:class:: AlphaTUBA(unnormalized_log_ratio: src.torch_mist.ratio.UnnormalizedRatioEstimator, baseline: src.torch_mist.baselines.Baseline = ConstantBaseline(1.0), alpha: float = 0.5, mc_samples: int = 1)


   Bases: :py:obj:`TUBA`


.. py:class:: SMILE(unnormalized_log_ratio: src.torch_mist.ratio.UnnormalizedRatioEstimator, mc_samples: int = 1, tau: float = 5.0)


   Bases: :py:obj:`MINE`, :py:obj:`JS`

   .. py:method:: _compute_log_ratio(x: torch.Tensor, y: torch.Tensor, f: torch.Tensor, y_: torch.Tensor, f_: torch.Tensor) -> torch.Tensor


   .. py:method:: _compute_log_ratio_grad(x: torch.Tensor, y: torch.Tensor, f: torch.Tensor, y_: torch.Tensor, f_: torch.Tensor) -> Optional[torch.Tensor]



.. py:class:: FLO(unnormalized_log_ratio: src.torch_mist.ratio.UnnormalizedRatioEstimator, baseline: src.torch_mist.baselines.LearnableJointBaseline, mc_samples: int = 1)


   Bases: :py:obj:`DiscriminativeMutualInformationEstimator`

   .. py:method:: _compute_log_ratio(x: torch.Tensor, y: torch.Tensor, f: torch.Tensor, y_: torch.Tensor, f_: torch.Tensor) -> torch.Tensor



