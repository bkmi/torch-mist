:py:mod:`src.torch_mist.distributions.parametrizations.map`
===========================================================

.. py:module:: src.torch_mist.distributions.parametrizations.map


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.torch_mist.distributions.parametrizations.map.ParameterMap
   src.torch_mist.distributions.parametrizations.map.DeltaMap
   src.torch_mist.distributions.parametrizations.map.LocScaleMap
   src.torch_mist.distributions.parametrizations.map.LogitsMap
   src.torch_mist.distributions.parametrizations.map.TemperatureLogitsMap




Attributes
~~~~~~~~~~

.. autoapisummary::

   src.torch_mist.distributions.parametrizations.map.EPSILON


.. py:data:: EPSILON
   :value: 1e-06

   

.. py:class:: ParameterMap


   Mapping from a list of tensors to a dictionary representing the parametrization of a distribution.
   Abstract class.

   .. py:attribute:: supported_distributions
      :type: List[Type[torch.distributions.Distribution]]
      :value: []

      

   .. py:attribute:: n_parameters
      :type: int
      :value: 0

      

   .. py:method:: map_parameters(parameter_list: List[torch.Tensor]) -> Dict[str, torch.Tensor]
      :abstractmethod:

      Abstract method responsible for defining the mapping from the list of tensors to the parameter dictionary.

      :param parameter_list: The list of parameters for the distribution of interest.
      :type parameter_list: List[torch.Tensor]

      :returns: The named parameters for the distribution of interest.
      :rtype: Dict[str, torch.Tensor]


   .. py:method:: __call__(parameter_list: Union[torch.Tensor, List[torch.Tensor]]) -> Dict[str, torch.Tensor]


   .. py:method:: extra_repr()


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: DeltaMap


   Bases: :py:obj:`ParameterMap`

   Delta Parameter mapping: maps a list of one tensor into a delta distribution at the same location

   .. py:attribute:: supported_distributions
      :type: List[Type[torch.distributions.Distribution]]

      

   .. py:attribute:: n_parameters
      :type: int
      :value: 1

      

   .. py:method:: map_parameters(parameter_list: List[torch.Tensor]) -> Dict[str, torch.Tensor]

      Abstract method responsible for defining the mapping from the list of tensors to the parameter dictionary.

      :param parameter_list: The list of parameters for the distribution of interest.
      :type parameter_list: List[torch.Tensor]

      :returns: The named parameters for the distribution of interest.
      :rtype: Dict[str, torch.Tensor]



.. py:class:: LocScaleMap(scale: Optional[float] = None, epsilon: float = EPSILON, scale_offset: float = 0.0)


   Bases: :py:obj:`ParameterMap`

   Mapping from a list of tensors to a dictionary representing the parametrization of a distribution.
   Abstract class.

   .. py:attribute:: supported_distributions
      :type: List[Type[torch.distributions.Distribution]]

      

   .. py:method:: map_parameters(parameter_list: List[torch.Tensor]) -> Dict[str, torch.Tensor]

      Abstract method responsible for defining the mapping from the list of tensors to the parameter dictionary.

      :param parameter_list: The list of parameters for the distribution of interest.
      :type parameter_list: List[torch.Tensor]

      :returns: The named parameters for the distribution of interest.
      :rtype: Dict[str, torch.Tensor]



.. py:class:: LogitsMap


   Bases: :py:obj:`ParameterMap`

   Mapping from a list of tensors to a dictionary representing the parametrization of a distribution.
   Abstract class.

   .. py:attribute:: supported_distributions
      :type: List[Type[torch.distributions.Distribution]]

      

   .. py:attribute:: n_parameters
      :type: int
      :value: 1

      

   .. py:method:: map_parameters(parameter_list: List[torch.Tensor]) -> Dict[str, torch.Tensor]

      Abstract method responsible for defining the mapping from the list of tensors to the parameter dictionary.

      :param parameter_list: The list of parameters for the distribution of interest.
      :type parameter_list: List[torch.Tensor]

      :returns: The named parameters for the distribution of interest.
      :rtype: Dict[str, torch.Tensor]



.. py:class:: TemperatureLogitsMap


   Bases: :py:obj:`ParameterMap`

   Mapping from a list of tensors to a dictionary representing the parametrization of a distribution.
   Abstract class.

   .. py:attribute:: supported_distributions
      :type: List[Type[torch.distributions.Distribution]]

      

   .. py:attribute:: n_parameters
      :type: int
      :value: 2

      

   .. py:method:: map_parameters(parameter_list: List[torch.Tensor]) -> Dict[str, torch.Tensor]

      Abstract method responsible for defining the mapping from the list of tensors to the parameter dictionary.

      :param parameter_list: The list of parameters for the distribution of interest.
      :type parameter_list: List[torch.Tensor]

      :returns: The named parameters for the distribution of interest.
      :rtype: Dict[str, torch.Tensor]



