data:
  class_path: core.data.datamodule.ParticlesDataModule
  init_args:
    traj_file: correlated_particles.npy
    attribute_file: correlated_clusters_32.npy
    num_workers: 18
    batch_size: 128

model:
  class_path: core.task.InfoMax
  init_args:
    encoder_x:
    mi_estimator:
      class_path: core.models.mi_estimator.HybridMutualInformationEstimator
      init_args:
        generative_estimator:
          class_path: core.models.mi_estimator.ABC
          init_args:
            # Using a Normal distribution with learnable (conditional) mean and variance
            conditional_a_y:
              class_path: core.models.learnable_distributions.ConditionalCategoricalMLP
              init_args:
                y_dim: 30
                n_classes: 32 # Same as the number of clusters
                hidden_dims: [ 128 ]
            marginal_a:
              class_path: core.models.learnable_distributions.LearnableCategorical
              init_args:
                n_classes: 32 # Same as the number of clusters
    optimizer_class: torch.optim.Adam
    optimizer_init_args:
      lr: 5e-4

trainer:
  max_steps: 100000
  callbacks:
    - class_path: pytorch_lightning.callbacks.LearningRateMonitor
    - class_path: core.callbacks.VarianceLogCallback
      init_args:
          key: ["mi/value", "mi/grad", "mi/gen/value", "mi/gen/grad", "mi/dis/value", "mi/dis/grad"]
